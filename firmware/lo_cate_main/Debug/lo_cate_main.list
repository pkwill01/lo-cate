
lo_cate_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080084c8  080084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800851c  0800851c  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800851c  0800851c  0000951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008524  08008524  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008524  08008524  00009524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008528  08008528  00009528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800852c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d8c  200000fc  08008628  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e88  08008628  0000ae88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001404b  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003349  00000000  00000000  0001e177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000214c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e50  00000000  00000000  00022778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019001  00000000  00000000  000235c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b5e  00000000  00000000  0003c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c64  00000000  00000000  00052127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e90  00000000  00000000  000e2dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e7c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080084b0 	.word	0x080084b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080084b0 	.word	0x080084b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <lora_read_reg>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lora_read_reg(uint8_t reg_addr, uint8_t reg_set, uint8_t *return_val) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	603a      	str	r2, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	460b      	mov	r3, r1
 80004d2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef hal_status;
	uint8_t tx_data[2] = { 0 };
 80004d4:	2300      	movs	r3, #0
 80004d6:	81bb      	strh	r3, [r7, #12]
	uint8_t rx_data[2] = { 0 };
 80004d8:	2300      	movs	r3, #0
 80004da:	813b      	strh	r3, [r7, #8]

	//define transmit and receive buffers
	tx_data[0] = reg_addr;                // read operation
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	733b      	strb	r3, [r7, #12]
	tx_data[1] = reg_set;                 // byte to write. 0x00 to read
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	737b      	strb	r3, [r7, #13]

	//set NSS pin to low and perform transmit receive

	HAL_GPIO_WritePin(LORA_CSB_GPIO_Port, LORA_CSB_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2104      	movs	r1, #4
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <lora_read_reg+0x5c>)
 80004ea:	f001 f8c1 	bl	8001670 <HAL_GPIO_WritePin>
	hal_status = HAL_SPI_TransmitReceive(&hspi2, tx_data, rx_data, 2, 1000);
 80004ee:	f107 0208 	add.w	r2, r7, #8
 80004f2:	f107 010c 	add.w	r1, r7, #12
 80004f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <lora_read_reg+0x60>)
 8000500:	f003 f819 	bl	8003536 <HAL_SPI_TransmitReceive>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LORA_CSB_GPIO_Port, LORA_CSB_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2104      	movs	r1, #4
 800050c:	4804      	ldr	r0, [pc, #16]	@ (8000520 <lora_read_reg+0x5c>)
 800050e:	f001 f8af 	bl	8001670 <HAL_GPIO_WritePin>

	//  logger("TX 0x%02x 0x%02x | RX 0x%02x 0x%02x\r\n", tx_data[0], tx_data[1], rx_data[0], rx_data[1]);
	*return_val = rx_data[1];
 8000512:	7a7a      	ldrb	r2, [r7, #9]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020400 	.word	0x40020400
 8000524:	20000170 	.word	0x20000170

08000528 <imu_read_reg>:

void imu_read_reg(uint8_t reg_addr, uint8_t reg_set, uint8_t *return_val) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	603a      	str	r2, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	460b      	mov	r3, r1
 8000536:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef hal_status;
	uint8_t tx_data[2] = { 0 };
 8000538:	2300      	movs	r3, #0
 800053a:	81bb      	strh	r3, [r7, #12]
	uint8_t rx_data[2] = { 0 };
 800053c:	2300      	movs	r3, #0
 800053e:	813b      	strh	r3, [r7, #8]

	//define transmit and receive buffers
	tx_data[0] = reg_addr;                // read operation
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	733b      	strb	r3, [r7, #12]
	tx_data[1] = reg_set;                 // byte to write. 0x00 to read
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	737b      	strb	r3, [r7, #13]

	//set NSS pin to low and perform transmit receive

	HAL_GPIO_WritePin(IMU_CSB_GPIO_Port, IMU_CSB_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <imu_read_reg+0x5c>)
 800054e:	f001 f88f 	bl	8001670 <HAL_GPIO_WritePin>
	hal_status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1000);
 8000552:	f107 0208 	add.w	r2, r7, #8
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2302      	movs	r3, #2
 8000562:	4809      	ldr	r0, [pc, #36]	@ (8000588 <imu_read_reg+0x60>)
 8000564:	f002 ffe7 	bl	8003536 <HAL_SPI_TransmitReceive>
 8000568:	4603      	mov	r3, r0
 800056a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(IMU_CSB_GPIO_Port, IMU_CSB_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <imu_read_reg+0x5c>)
 8000572:	f001 f87d 	bl	8001670 <HAL_GPIO_WritePin>

	//  logger("TX 0x%02x 0x%02x | RX 0x%02x 0x%02x\r\n", tx_data[0], tx_data[1], rx_data[0], rx_data[1]);
	*return_val = rx_data[1];
 8000576:	7a7a      	ldrb	r2, [r7, #9]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	701a      	strb	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40020800 	.word	0x40020800
 8000588:	20000118 	.word	0x20000118

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fd41 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f843 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa7d 	bl	8000a98 <MX_GPIO_Init>
  MX_SPI1_Init();
 800059e:	f000 f8a9 	bl	80006f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005a2:	f000 f8dd 	bl	8000760 <MX_SPI2_Init>
  MX_TIM2_Init();
 80005a6:	f000 f911 	bl	80007cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80005aa:	f000 f98f 	bl	80008cc <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ae:	f000 fa0f 	bl	80009d0 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80005b2:	f007 fa5d 	bl	8007a70 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t rx_lora_buff = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_imu_buff = {0};
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]

	// IMU module init
	HAL_GPIO_WritePin(IMU_CSB_GPIO_Port, IMU_CSB_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	4815      	ldr	r0, [pc, #84]	@ (8000618 <main+0x8c>)
 80005c4:	f001 f854 	bl	8001670 <HAL_GPIO_WritePin>

	// LoRa module init
	HAL_GPIO_WritePin(LORA_CSB_GPIO_Port, LORA_CSB_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	4813      	ldr	r0, [pc, #76]	@ (800061c <main+0x90>)
 80005ce:	f001 f84f 	bl	8001670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <main+0x90>)
 80005d8:	f001 f84a 	bl	8001670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x90>)
 80005e2:	f001 f845 	bl	8001670 <HAL_GPIO_WritePin>
	lora_read_reg(0x42,0x00, &rx_lora_buff);
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	461a      	mov	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	2042      	movs	r0, #66	@ 0x42
 80005ee:	f7ff ff69 	bl	80004c4 <lora_read_reg>
    /* USER CODE BEGIN 3 */
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
//		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
//		HAL_Delay(250);
		lora_read_reg(0x42,0x00, &rx_lora_buff);
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	461a      	mov	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	2042      	movs	r0, #66	@ 0x42
 80005fa:	f7ff ff63 	bl	80004c4 <lora_read_reg>
		imu_read_reg(0x01,0x00, &rx_imu_buff);
 80005fe:	1dbb      	adds	r3, r7, #6
 8000600:	461a      	mov	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ff8f 	bl	8000528 <imu_read_reg>
//		uint8_t buffer[] = "Hello, World!\r\n";
//		CDC_Transmit_FS(buffer, sizeof(buffer));
		HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060e:	f000 fd75 	bl	80010fc <HAL_Delay>
		lora_read_reg(0x42,0x00, &rx_lora_buff);
 8000612:	bf00      	nop
 8000614:	e7ed      	b.n	80005f2 <main+0x66>
 8000616:	bf00      	nop
 8000618:	40020800 	.word	0x40020800
 800061c:	40020400 	.word	0x40020400

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 ff12 	bl	8008458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a20      	ldr	r2, [pc, #128]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000698:	2348      	movs	r3, #72	@ 0x48
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa4b 	bl	8002b44 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b4:	f000 fa8e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fcad 	bl	8003034 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e0:	f000 fa78 	bl	8000bd4 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	@ 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_SPI1_Init+0x64>)
 80006fa:	4a18      	ldr	r2, [pc, #96]	@ (800075c <MX_SPI1_Init+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000728:	2210      	movs	r2, #16
 800072a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000740:	220a      	movs	r2, #10
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_SPI1_Init+0x64>)
 8000746:	f002 fe6d 	bl	8003424 <HAL_SPI_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 fa40 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000118 	.word	0x20000118
 800075c:	40013000 	.word	0x40013000

08000760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_SPI2_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	@ (80007c8 <MX_SPI2_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_SPI2_Init+0x64>)
 800076c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_SPI2_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_SPI2_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_SPI2_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_SPI2_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_SPI2_Init+0x64>)
 800078c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000790:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_SPI2_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_SPI2_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_SPI2_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_SPI2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_SPI2_Init+0x64>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_SPI2_Init+0x64>)
 80007b2:	f002 fe37 	bl	8003424 <HAL_SPI_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 fa0a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000170 	.word	0x20000170
 80007c8:	40003800 	.word	0x40003800

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	@ 0x38
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000804:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000810:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4828      	ldr	r0, [pc, #160]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000826:	f003 f913 	bl	8003a50 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000830:	f000 f9d0 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083e:	4619      	mov	r1, r3
 8000840:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000842:	f003 fa65 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800084c:	f000 f9c2 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000850:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000852:	f003 f94c 	bl	8003aee <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800085c:	f000 f9ba 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4619      	mov	r1, r3
 800086e:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000870:	f003 fdc8 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800087a:	f000 f9ab 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	@ 0x60
 8000880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 8000896:	f003 f979 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008a0:	f000 f998 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2208      	movs	r2, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 80008ac:	f003 f96e 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80008b6:	f000 f98d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ba:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_TIM2_Init+0xfc>)
 80008bc:	f000 faae 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	@ 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001c8 	.word	0x200001c8

080008cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fc:	4b32      	ldr	r3, [pc, #200]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 80008fe:	4a33      	ldr	r2, [pc, #204]	@ (80009cc <MX_TIM3_Init+0x100>)
 8000900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000902:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b2f      	ldr	r3, [pc, #188]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800090e:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000922:	4829      	ldr	r0, [pc, #164]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000924:	f003 f894 	bl	8003a50 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800092e:	f000 f951 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093c:	4619      	mov	r1, r3
 800093e:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000940:	f003 f9e6 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800094a:	f000 f943 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800094e:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000950:	f003 f8cd 	bl	8003aee <HAL_TIM_PWM_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800095a:	f000 f93b 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	4619      	mov	r1, r3
 800096c:	4816      	ldr	r0, [pc, #88]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 800096e:	f003 fd49 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000978:	f000 f92c 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097c:	2360      	movs	r3, #96	@ 0x60
 800097e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 8000994:	f003 f8fa 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800099e:	f000 f919 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2208      	movs	r2, #8
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 80009aa:	f003 f8ef 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80009b4:	f000 f90e 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <MX_TIM3_Init+0xfc>)
 80009ba:	f000 fa2f 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 80009be:	bf00      	nop
 80009c0:	3738      	adds	r7, #56	@ 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000210 	.word	0x20000210
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 80009f4:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <MX_TIM4_Init+0xc4>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a18:	481d      	ldr	r0, [pc, #116]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a1a:	f003 f868 	bl	8003aee <HAL_TIM_PWM_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f8d6 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a38:	f003 fce4 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f8c7 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	@ 0x60
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a5e:	f003 f895 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a68:	f000 f8b4 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2208      	movs	r2, #8
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a74:	f003 f88a 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a7e:	f000 f8a9 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a82:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM4_Init+0xc0>)
 8000a84:	f000 f9ca 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000258 	.word	0x20000258
 8000a94:	40000800 	.word	0x40000800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b44      	ldr	r3, [pc, #272]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a43      	ldr	r2, [pc, #268]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b41      	ldr	r3, [pc, #260]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a35      	ldr	r2, [pc, #212]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0x12c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	4829      	ldr	r0, [pc, #164]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000b24:	f000 fda4 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CSB_GPIO_Port, IMU_CSB_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4827      	ldr	r0, [pc, #156]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000b2e:	f000 fd9f 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|LORA_CSB_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2106      	movs	r1, #6
 8000b36:	4826      	ldr	r0, [pc, #152]	@ (8000bd0 <MX_GPIO_Init+0x138>)
 8000b38:	f000 fd9a 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	21a0      	movs	r1, #160	@ 0xa0
 8000b40:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_GPIO_Init+0x138>)
 8000b42:	f000 fd95 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481a      	ldr	r0, [pc, #104]	@ (8000bc8 <MX_GPIO_Init+0x130>)
 8000b5e:	f000 fc03 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CSB_Pin */
  GPIO_InitStruct.Pin = IMU_CSB_Pin;
 8000b62:	2310      	movs	r3, #16
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CSB_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000b7a:	f000 fbf5 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_CSB_Pin PB5 PB7 */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_CSB_Pin|GPIO_PIN_5|GPIO_PIN_7;
 8000b7e:	23a6      	movs	r3, #166	@ 0xa6
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_GPIO_Init+0x138>)
 8000b96:	f000 fbe7 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	23c0      	movs	r3, #192	@ 0xc0
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000baa:	2308      	movs	r3, #8
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_GPIO_Init+0x134>)
 8000bb6:	f000 fbd7 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a41      	ldr	r2, [pc, #260]	@ (8000d54 <HAL_SPI_MspInit+0x124>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	4b39      	ldr	r3, [pc, #228]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a38      	ldr	r2, [pc, #224]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8000c8a:	23e0      	movs	r3, #224	@ 0xe0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	482d      	ldr	r0, [pc, #180]	@ (8000d5c <HAL_SPI_MspInit+0x12c>)
 8000ca6:	f000 fb5f 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000caa:	e04f      	b.n	8000d4c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d60 <HAL_SPI_MspInit+0x130>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d14a      	bne.n	8000d4c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a26      	ldr	r2, [pc, #152]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a1f      	ldr	r2, [pc, #124]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_SPI_MspInit+0x128>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <HAL_SPI_MspInit+0x134>)
 8000d26:	f000 fb1f 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <HAL_SPI_MspInit+0x138>)
 8000d48:	f000 fb0e 	bl	8001368 <HAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	@ 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40003800 	.word	0x40003800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d7c:	d10e      	bne.n	8000d9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d9a:	e012      	b.n	8000dc2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x68>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10d      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x64>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10d      	bne.n	8000e06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <HAL_TIM_PWM_MspInit+0x40>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40000800 	.word	0x40000800
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e3c:	d11f      	bne.n	8000e7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED2_RED_Pin;
 8000e5a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <HAL_TIM_MspPostInit+0x100>)
 8000e78:	f000 fa76 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e7c:	e047      	b.n	8000f0e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a27      	ldr	r2, [pc, #156]	@ (8000f20 <HAL_TIM_MspPostInit+0x104>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d11e      	bne.n	8000ec6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED3_GREEN_Pin|LED3_RED_Pin;
 8000ea4:	2311      	movs	r3, #17
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4819      	ldr	r0, [pc, #100]	@ (8000f24 <HAL_TIM_MspPostInit+0x108>)
 8000ec0:	f000 fa52 	bl	8001368 <HAL_GPIO_Init>
}
 8000ec4:	e023      	b.n	8000f0e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <HAL_TIM_MspPostInit+0x10c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d11e      	bne.n	8000f0e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_TIM_MspPostInit+0xfc>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED1_RED_Pin|LED1_GREEN_Pin;
 8000eec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000efe:	2302      	movs	r3, #2
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <HAL_TIM_MspPostInit+0x108>)
 8000f0a:	f000 fa2d 	bl	8001368 <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40000400 	.word	0x40000400
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40000800 	.word	0x40000800

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f89b 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <OTG_FS_IRQHandler+0x10>)
 8000f92:	f000 fcca 	bl	800192a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001784 	.word	0x20001784

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f007 fa39 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fac9 	bl	800058c <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001008:	0800852c 	.word	0x0800852c
  ldr r2, =_sbss
 800100c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001010:	20001e88 	.word	0x20001e88

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fdc8 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	200002a0 	.word	0x200002a0

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200002a0 	.word	0x200002a0

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e159      	b.n	8001638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8148 	bne.w	8001632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a2 	beq.w	8001632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b57      	ldr	r3, [pc, #348]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a56      	ldr	r2, [pc, #344]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a52      	ldr	r2, [pc, #328]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a49      	ldr	r2, [pc, #292]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x202>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	@ (800165c <HAL_GPIO_Init+0x2f4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1fe>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a47      	ldr	r2, [pc, #284]	@ (8001660 <HAL_GPIO_Init+0x2f8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a46      	ldr	r2, [pc, #280]	@ (8001664 <HAL_GPIO_Init+0x2fc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1f6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	@ (8001668 <HAL_GPIO_Init+0x300>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1f2>
 8001556:	2304      	movs	r3, #4
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155a:	2307      	movs	r3, #7
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x204>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_GPIO_Init+0x304>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a24      	ldr	r2, [pc, #144]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <HAL_GPIO_Init+0x304>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_GPIO_Init+0x304>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_GPIO_Init+0x304>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f aea2 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e101      	b.n	80018b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f006 fbae 	bl	8007e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016e2:	d102      	bne.n	80016ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 f80d 	bl	800470e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7c1a      	ldrb	r2, [r3, #16]
 80016fc:	f88d 2000 	strb.w	r2, [sp]
 8001700:	3304      	adds	r3, #4
 8001702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001704:	f002 feec 	bl	80044e0 <USB_CoreInit>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2202      	movs	r2, #2
 8001712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0ce      	b.n	80018b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f805 	bl	8004730 <USB_SetCurrentMode>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0bf      	b.n	80018b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e04a      	b.n	80017d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3315      	adds	r3, #21
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3314      	adds	r3, #20
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	b298      	uxth	r0, r3
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	332e      	adds	r3, #46	@ 0x2e
 800177a:	4602      	mov	r2, r0
 800177c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3318      	adds	r3, #24
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	331c      	adds	r3, #28
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3320      	adds	r3, #32
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3324      	adds	r3, #36	@ 0x24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	3301      	adds	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	791b      	ldrb	r3, [r3, #4]
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3af      	bcc.n	800173e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e044      	b.n	800186e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3b5      	bcc.n	80017e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7c1a      	ldrb	r2, [r3, #16]
 8001880:	f88d 2000 	strb.w	r2, [sp]
 8001884:	3304      	adds	r3, #4
 8001886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001888:	f002 ff9e 	bl	80047c8 <USB_DevInit>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00c      	b.n	80018b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 ffe2 	bl	800587a <USB_DevDisconnect>

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_Start+0x1c>
 80018d8:	2302      	movs	r3, #2
 80018da:	e022      	b.n	8001922 <HAL_PCD_Start+0x62>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 feef 	bl	80046ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 ff90 	bl	8005838 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800192a:	b590      	push	{r4, r7, lr}
 800192c:	b08d      	sub	sp, #52	@ 0x34
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 f84e 	bl	80059e2 <USB_GetMode>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 848c 	bne.w	8002266 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 ffb2 	bl	80058bc <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8482 	beq.w	8002264 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 ff9f 	bl	80058bc <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d107      	bne.n	8001998 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f002 0202 	and.w	r2, r2, #2
 8001996:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 ff8d 	bl	80058bc <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d161      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0210 	bic.w	r2, r2, #16
 80019ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 020f 	and.w	r2, r3, #15
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	0c5b      	lsrs	r3, r3, #17
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d124      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d035      	beq.n	8001a60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	6a38      	ldr	r0, [r7, #32]
 8001a08:	f003 fdc4 	bl	8005594 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a18:	441a      	add	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a2a:	441a      	add	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	e016      	b.n	8001a60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	0c5b      	lsrs	r3, r3, #17
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d110      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a44:	2208      	movs	r2, #8
 8001a46:	4619      	mov	r1, r3
 8001a48:	6a38      	ldr	r0, [r7, #32]
 8001a4a:	f003 fda3 	bl	8005594 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a5a:	441a      	add	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0210 	orr.w	r2, r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 ff21 	bl	80058bc <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a84:	f040 80a7 	bne.w	8001bd6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 ff26 	bl	80058e2 <USB_ReadDevAllOutEpInterrupt>
 8001a96:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a98:	e099      	b.n	8001bce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 808e 	beq.w	8001bc2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 ff4a 	bl	800594a <USB_ReadDevOutEPInterrupt>
 8001ab6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fea2 	bl	8002820 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00c      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af2:	461a      	mov	r2, r3
 8001af4:	2308      	movs	r3, #8
 8001af6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 ff78 	bl	80029f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b16:	461a      	mov	r2, r3
 8001b18:	2310      	movs	r3, #16
 8001b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d030      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b80      	cmp	r3, #128	@ 0x80
 8001b30:	d109      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	78db      	ldrb	r3, [r3, #3]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2200      	movs	r2, #0
 8001b68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f006 fa63 	bl	800803c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b82:	461a      	mov	r2, r3
 8001b84:	2302      	movs	r3, #2
 8001b86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f af62 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fe6e 	bl	80058bc <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bea:	f040 80db 	bne.w	8001da4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fe8f 	bl	8005916 <USB_ReadDevAllInEpInterrupt>
 8001bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001bfe:	e0cd      	b.n	8001d9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80c2 	beq.w	8001d90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 feb5 	bl	8005986 <USB_ReadDevInEPInterrupt>
 8001c1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d057      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	2201      	movs	r2, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69f9      	ldr	r1, [r7, #28]
 8001c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c48:	4013      	ands	r3, r2
 8001c4a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d132      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3320      	adds	r3, #32
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4403      	add	r3, r0
 8001c86:	331c      	adds	r3, #28
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4419      	add	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4403      	add	r3, r0
 8001c9a:	3320      	adds	r3, #32
 8001c9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d113      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x3a2>
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3324      	adds	r3, #36	@ 0x24
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	f003 febc 	bl	8005a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f006 f92d 	bl	8007f32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d26:	461a      	mov	r2, r3
 8001d28:	2340      	movs	r3, #64	@ 0x40
 8001d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d023      	beq.n	8001d7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d38:	6a38      	ldr	r0, [r7, #32]
 8001d3a:	f002 fea9 	bl	8004a90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3310      	adds	r3, #16
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	78db      	ldrb	r3, [r3, #3]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 f97a 	bl	8008060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fcbb 	bl	8002706 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	3301      	adds	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f47f af2e 	bne.w	8001c00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fd87 	bl	80058bc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001db8:	d122      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001de0:	2100      	movs	r1, #0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fea2 	bl	8002b2c <HAL_PCDEx_LPM_Callback>
 8001de8:	e002      	b.n	8001df0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f006 f918 	bl	8008020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fd59 	bl	80058bc <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e14:	d112      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f006 f8d4 	bl	8007fd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001e3a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fd3b 	bl	80058bc <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e50:	f040 80b7 	bne.w	8001fc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fe0e 	bl	8004a90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e78:	e046      	b.n	8001f08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e86:	461a      	mov	r2, r3
 8001e88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ea8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001eac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ec0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ed2:	0151      	lsls	r1, r2, #5
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	440a      	add	r2, r1
 8001ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001edc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ee0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef2:	0151      	lsls	r1, r2, #5
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	440a      	add	r2, r1
 8001ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001efc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	3301      	adds	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	791b      	ldrb	r3, [r3, #4]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d3b2      	bcc.n	8001e7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f22:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7bdb      	ldrb	r3, [r3, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d016      	beq.n	8001f5e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f40:	f043 030b 	orr.w	r3, r3, #11
 8001f44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f56:	f043 030b 	orr.w	r3, r3, #11
 8001f5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5c:	e015      	b.n	8001f8a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f70:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001f74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f84:	f043 030b 	orr.w	r3, r3, #11
 8001f88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f98:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fac:	461a      	mov	r2, r3
 8001fae:	f003 fd49 	bl	8005a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fc78 	bl	80058bc <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd6:	d123      	bne.n	8002020 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fd0e 	bl	80059fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fdcb 	bl	8004b82 <USB_GetDevSpeed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681c      	ldr	r4, [r3, #0]
 8001ff8:	f001 fa08 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8001ffc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002002:	461a      	mov	r2, r3
 8002004:	4620      	mov	r0, r4
 8002006:	f002 facf 	bl	80045a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f005 ffb9 	bl	8007f82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800201e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fc49 	bl	80058bc <USB_ReadInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b08      	cmp	r3, #8
 8002032:	d10a      	bne.n	800204a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f005 ff96 	bl	8007f66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 0208 	and.w	r2, r2, #8
 8002048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fc34 	bl	80058bc <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	d123      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
 800206e:	e014      	b.n	800209a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb08 	bl	80026a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	3301      	adds	r3, #1
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d3e4      	bcc.n	8002070 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fc06 	bl	80058bc <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ba:	d13c      	bne.n	8002136 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020bc:	2301      	movs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c0:	e02b      	b.n	800211a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3318      	adds	r3, #24
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d115      	bne.n	8002114 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da12      	bge.n	8002114 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3317      	adds	r3, #23
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fac8 	bl	80026a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	3301      	adds	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	791b      	ldrb	r3, [r3, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	4293      	cmp	r3, r2
 8002124:	d3cd      	bcc.n	80020c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fbbe 	bl	80058bc <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800214a:	d156      	bne.n	80021fa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002150:	e045      	b.n	80021de <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d12e      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800217a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	da2b      	bge.n	80021d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800218c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002190:	429a      	cmp	r2, r3
 8002192:	d121      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d4:	6053      	str	r3, [r2, #4]
            break;
 80021d6:	e008      	b.n	80021ea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	3301      	adds	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d3b3      	bcc.n	8002152 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80021f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fb5c 	bl	80058bc <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220e:	d10a      	bne.n	8002226 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f005 ff37 	bl	8008084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fb46 	bl	80058bc <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b04      	cmp	r3, #4
 8002238:	d115      	bne.n	8002266 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f005 ff27 	bl	80080a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e000      	b.n	8002266 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3734      	adds	r7, #52	@ 0x34
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_PCD_SetAddress+0x1a>
 8002282:	2302      	movs	r3, #2
 8002284:	e012      	b.n	80022ac <HAL_PCD_SetAddress+0x40>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 faa5 	bl	80057ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	70fb      	strb	r3, [r7, #3]
 80022c6:	460b      	mov	r3, r1
 80022c8:	803b      	strh	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0f      	bge.n	80022fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3310      	adds	r3, #16
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	705a      	strb	r2, [r3, #1]
 80022f8:	e00f      	b.n	800231a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002326:	883a      	ldrh	r2, [r7, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	78ba      	ldrb	r2, [r7, #2]
 8002330:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002344:	78bb      	ldrb	r3, [r7, #2]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d102      	bne.n	8002350 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_Open+0xaa>
 800235a:	2302      	movs	r3, #2
 800235c:	e00e      	b.n	800237c <HAL_PCD_EP_Open+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fc2d 	bl	8004bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800237a:	7afb      	ldrb	r3, [r7, #11]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002394:	2b00      	cmp	r3, #0
 8002396:	da0f      	bge.n	80023b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3310      	adds	r3, #16
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	705a      	strb	r2, [r3, #1]
 80023b6:	e00f      	b.n	80023d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_PCD_EP_Close+0x6e>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e00e      	b.n	8002410 <HAL_PCD_EP_Close+0x8c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fc6b 	bl	8004cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	460b      	mov	r3, r1
 8002426:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	f003 020f 	and.w	r2, r3, #15
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	b2da      	uxtb	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	799b      	ldrb	r3, [r3, #6]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	799b      	ldrb	r3, [r3, #6]
 800247c:	461a      	mov	r2, r3
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	f002 fd08 	bl	8004e94 <USB_EPStartXfer>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80024b0:	681b      	ldr	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	460b      	mov	r3, r1
 80024cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	3310      	adds	r3, #16
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2201      	movs	r2, #1
 80024fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	b2da      	uxtb	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	799b      	ldrb	r3, [r3, #6]
 8002520:	461a      	mov	r2, r3
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	f002 fcb6 	bl	8004e94 <USB_EPStartXfer>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	7912      	ldrb	r2, [r2, #4]
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e04f      	b.n	80025f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da0f      	bge.n	8002578 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3310      	adds	r3, #16
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	3304      	adds	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	705a      	strb	r2, [r3, #1]
 8002576:	e00d      	b.n	8002594 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_EP_SetStall+0x82>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e01d      	b.n	80025f0 <HAL_PCD_EP_SetStall+0xbe>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 f83e 	bl	8005644 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7999      	ldrb	r1, [r3, #6]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025e0:	461a      	mov	r2, r3
 80025e2:	f003 fa2f 	bl	8005a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	7912      	ldrb	r2, [r2, #4]
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e042      	b.n	800269c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	da0f      	bge.n	800263e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	3310      	adds	r3, #16
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	3304      	adds	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	705a      	strb	r2, [r3, #1]
 800263c:	e00f      	b.n	800265e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b2da      	uxtb	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_PCD_EP_ClrStall+0x86>
 800267a:	2302      	movs	r3, #2
 800267c:	e00e      	b.n	800269c <HAL_PCD_EP_ClrStall+0xa4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f847 	bl	8005720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da0c      	bge.n	80026d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	3310      	adds	r3, #16
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e00c      	b.n	80026ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fe66 	bl	80053c4 <USB_EPStopXfer>
 80026f8:	4603      	mov	r3, r0
 80026fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	@ 0x28
 800270a:	af02      	add	r7, sp, #8
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3310      	adds	r3, #16
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	429a      	cmp	r2, r3
 8002738:	d901      	bls.n	800273e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d902      	bls.n	800275a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3303      	adds	r3, #3
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002762:	e02a      	b.n	80027ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	429a      	cmp	r2, r3
 8002778:	d902      	bls.n	8002780 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3303      	adds	r3, #3
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68d9      	ldr	r1, [r3, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4603      	mov	r3, r0
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f002 febb 	bl	8005518 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	441a      	add	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	441a      	add	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d809      	bhi.n	80027e4 <PCD_WriteEmptyTxFifo+0xde>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027d8:	429a      	cmp	r2, r3
 80027da:	d203      	bcs.n	80027e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1bf      	bne.n	8002764 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d811      	bhi.n	8002814 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	2201      	movs	r2, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	43db      	mvns	r3, r3
 800280a:	6939      	ldr	r1, [r7, #16]
 800280c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002810:	4013      	ands	r3, r2
 8002812:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	333c      	adds	r3, #60	@ 0x3c
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	799b      	ldrb	r3, [r3, #6]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d17b      	bne.n	800294e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a61      	ldr	r2, [pc, #388]	@ (80029e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f240 80b9 	bls.w	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80b3 	beq.w	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e0a7      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	2320      	movs	r3, #32
 80028a6:	6093      	str	r3, [r2, #8]
 80028a8:	e098      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8093 	bne.w	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d90f      	bls.n	80028de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d4:	461a      	mov	r2, r3
 80028d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028da:	6093      	str	r3, [r2, #8]
 80028dc:	e07e      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	0159      	lsls	r1, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	440b      	add	r3, r1
 8002900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d114      	bne.n	8002940 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002928:	461a      	mov	r2, r3
 800292a:	2101      	movs	r1, #1
 800292c:	f003 f88a 	bl	8005a44 <USB_EP0_OutStart>
 8002930:	e006      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	441a      	add	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f005 fad8 	bl	8007efc <HAL_PCD_DataOutStageCallback>
 800294c:	e046      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d124      	bne.n	80029a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	e032      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	2320      	movs	r3, #32
 8002990:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f005 faaf 	bl	8007efc <HAL_PCD_DataOutStageCallback>
 800299e:	e01d      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029c8:	461a      	mov	r2, r3
 80029ca:	2100      	movs	r1, #0
 80029cc:	f003 f83a 	bl	8005a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f005 fa90 	bl	8007efc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	4f54300a 	.word	0x4f54300a
 80029ec:	4f54310a 	.word	0x4f54310a

080029f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	333c      	adds	r3, #60	@ 0x3c
 8002a08:	3304      	adds	r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d90e      	bls.n	8002a44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f005 fa47 	bl	8007ed8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d90c      	bls.n	8002a6c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	799b      	ldrb	r3, [r3, #6]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d108      	bne.n	8002a6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a64:	461a      	mov	r2, r3
 8002a66:	2101      	movs	r1, #1
 8002a68:	f002 ffec 	bl	8005a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	4f54300a 	.word	0x4f54300a

08002a7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a9a:	883b      	ldrh	r3, [r7, #0]
 8002a9c:	0419      	lsls	r1, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aa8:	e028      	b.n	8002afc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e00d      	b.n	8002ada <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	3340      	adds	r3, #64	@ 0x40
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3ec      	bcc.n	8002abe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ae4:	883b      	ldrh	r3, [r7, #0]
 8002ae6:	0418      	lsls	r0, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	4302      	orrs	r2, r0
 8002af4:	3340      	adds	r3, #64	@ 0x40
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e267      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d075      	beq.n	8002c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d00c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d112      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4b82      	ldr	r3, [pc, #520]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4b7e      	ldr	r3, [pc, #504]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x108>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d157      	bne.n	8002c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e242      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x74>
 8002baa:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x98>
 8002bc2:	4b70      	ldr	r3, [pc, #448]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b6d      	ldr	r3, [pc, #436]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	4b69      	ldr	r3, [pc, #420]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a68      	ldr	r2, [pc, #416]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a65      	ldr	r2, [pc, #404]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa72 	bl	80010e4 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fa6e 	bl	80010e4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e207      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b5b      	ldr	r3, [pc, #364]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fa5e 	bl	80010e4 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fa5a 	bl	80010e4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1f3      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b51      	ldr	r3, [pc, #324]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b44      	ldr	r3, [pc, #272]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x152>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1c7      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCC_OscConfig+0x244>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fa13 	bl	80010e4 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fa0f 	bl	80010e4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1a8      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b28      	ldr	r3, [pc, #160]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4925      	ldr	r1, [pc, #148]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x244>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f9f2 	bl	80010e4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe f9ee 	bl	80010e4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e187      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x248>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f9d2 	bl	80010e4 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe f9ce 	bl	80010e4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e167      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x240>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x200>
 8002d62:	e01b      	b.n	8002d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_OscConfig+0x248>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f9bb 	bl	80010e4 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e00e      	b.n	8002d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe f9b7 	bl	80010e4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d907      	bls.n	8002d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e150      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470000 	.word	0x42470000
 8002d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b88      	ldr	r3, [pc, #544]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ea      	bne.n	8002d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8097 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b81      	ldr	r3, [pc, #516]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b77      	ldr	r3, [pc, #476]	@ (8002fb8 <HAL_RCC_OscConfig+0x474>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b74      	ldr	r3, [pc, #464]	@ (8002fb8 <HAL_RCC_OscConfig+0x474>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a73      	ldr	r2, [pc, #460]	@ (8002fb8 <HAL_RCC_OscConfig+0x474>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe f977 	bl	80010e4 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe f973 	bl	80010e4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e10c      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb8 <HAL_RCC_OscConfig+0x474>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2ea>
 8002e20:	4b64      	ldr	r3, [pc, #400]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	4a63      	ldr	r2, [pc, #396]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x324>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x30c>
 8002e36:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e42:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x324>
 8002e50:	4b58      	ldr	r3, [pc, #352]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e54:	4a57      	ldr	r2, [pc, #348]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5c:	4b55      	ldr	r3, [pc, #340]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a54      	ldr	r2, [pc, #336]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe f938 	bl	80010e4 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe f934 	bl	80010e4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0cb      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b49      	ldr	r3, [pc, #292]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RCC_OscConfig+0x334>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f922 	bl	80010e4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe f91e 	bl	80010e4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0b5      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ee      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b39      	ldr	r3, [pc, #228]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	4a38      	ldr	r2, [pc, #224]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a1 	beq.w	8003024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee2:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d05c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d141      	bne.n	8002f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_OscConfig+0x478>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe f8f2 	bl	80010e4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe f8ee 	bl	80010e4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e087      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	491b      	ldr	r1, [pc, #108]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <HAL_RCC_OscConfig+0x478>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fe f8c7 	bl	80010e4 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe f8c3 	bl	80010e4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e05c      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x416>
 8002f78:	e054      	b.n	8003024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <HAL_RCC_OscConfig+0x478>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe f8b0 	bl	80010e4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f8ac 	bl	80010e4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e045      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x444>
 8002fa6:	e03d      	b.n	8003024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e038      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_RCC_OscConfig+0x4ec>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d028      	beq.n	8003020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d121      	bne.n	8003020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11a      	bne.n	8003020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d111      	bne.n	8003020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0cc      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b68      	ldr	r3, [pc, #416]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d90c      	bls.n	8003070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b65      	ldr	r3, [pc, #404]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b63      	ldr	r3, [pc, #396]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b8      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a58      	ldr	r2, [pc, #352]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494d      	ldr	r1, [pc, #308]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d044      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d119      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b3f      	ldr	r3, [pc, #252]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3b      	ldr	r3, [pc, #236]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e067      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4934      	ldr	r1, [pc, #208]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fd ffde 	bl	80010e4 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fd ffda 	bl	80010e4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e04f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d20c      	bcs.n	800317c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b22      	ldr	r3, [pc, #136]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e032      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4916      	ldr	r1, [pc, #88]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	490e      	ldr	r1, [pc, #56]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ba:	f000 f821 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	490a      	ldr	r1, [pc, #40]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	4a09      	ldr	r2, [pc, #36]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd ff3e 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023c00 	.word	0x40023c00
 80031f0:	40023800 	.word	0x40023800
 80031f4:	0800850c 	.word	0x0800850c
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003204:	b094      	sub	sp, #80	@ 0x50
 8003206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	647b      	str	r3, [r7, #68]	@ 0x44
 800320c:	2300      	movs	r3, #0
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	2300      	movs	r3, #0
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003218:	4b79      	ldr	r3, [pc, #484]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d00d      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x40>
 8003224:	2b08      	cmp	r3, #8
 8003226:	f200 80e1 	bhi.w	80033ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
 800322e:	2b04      	cmp	r3, #4
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x3a>
 8003232:	e0db      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x204>)
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003238:	e0db      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b73      	ldr	r3, [pc, #460]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x208>)
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323e:	e0d8      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003240:	4b6f      	ldr	r3, [pc, #444]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324a:	4b6d      	ldr	r3, [pc, #436]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b6a      	ldr	r3, [pc, #424]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	2200      	movs	r2, #0
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	633b      	str	r3, [r7, #48]	@ 0x30
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
 800326e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	6139      	str	r1, [r7, #16]
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a4:	4659      	mov	r1, fp
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4651      	mov	r1, sl
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4651      	mov	r1, sl
 80032b4:	ebb2 0801 	subs.w	r8, r2, r1
 80032b8:	4659      	mov	r1, fp
 80032ba:	eb63 0901 	sbc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb18 0303 	adds.w	r3, r8, r3
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	462b      	mov	r3, r5
 80032e0:	eb49 0303 	adc.w	r3, r9, r3
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032f2:	4629      	mov	r1, r5
 80032f4:	024b      	lsls	r3, r1, #9
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032fc:	4621      	mov	r1, r4
 80032fe:	024a      	lsls	r2, r1, #9
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003306:	2200      	movs	r2, #0
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800330c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003310:	f7fc ff60 	bl	80001d4 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800331c:	e058      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331e:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	2200      	movs	r2, #0
 8003326:	4618      	mov	r0, r3
 8003328:	4611      	mov	r1, r2
 800332a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
 8003334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	0159      	lsls	r1, r3, #5
 8003346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800334a:	0150      	lsls	r0, r2, #5
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4641      	mov	r1, r8
 8003352:	ebb2 0a01 	subs.w	sl, r2, r1
 8003356:	4649      	mov	r1, r9
 8003358:	eb63 0b01 	sbc.w	fp, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800336c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003370:	ebb2 040a 	subs.w	r4, r2, sl
 8003374:	eb63 050b 	sbc.w	r5, r3, fp
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	00eb      	lsls	r3, r5, #3
 8003382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003386:	00e2      	lsls	r2, r4, #3
 8003388:	4614      	mov	r4, r2
 800338a:	461d      	mov	r5, r3
 800338c:	4643      	mov	r3, r8
 800338e:	18e3      	adds	r3, r4, r3
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	464b      	mov	r3, r9
 8003394:	eb45 0303 	adc.w	r3, r5, r3
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a6:	4629      	mov	r1, r5
 80033a8:	028b      	lsls	r3, r1, #10
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b0:	4621      	mov	r1, r4
 80033b2:	028a      	lsls	r2, r1, #10
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ba:	2200      	movs	r2, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	61fa      	str	r2, [r7, #28]
 80033c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c4:	f7fc ff06 	bl	80001d4 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3750      	adds	r7, #80	@ 0x50
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07b      	b.n	800352e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003446:	d009      	beq.n	800345c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
 800344e:	e005      	b.n	800345c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fbda 	bl	8000c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0104 	and.w	r1, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0210 	and.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08c      	sub	sp, #48	@ 0x30
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003544:	2301      	movs	r3, #1
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_SPI_TransmitReceive+0x26>
 8003558:	2302      	movs	r3, #2
 800355a:	e198      	b.n	800388e <HAL_SPI_TransmitReceive+0x358>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003564:	f7fd fdbe 	bl	80010e4 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800357e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003582:	2b01      	cmp	r3, #1
 8003584:	d00f      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x70>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358c:	d107      	bne.n	800359e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <HAL_SPI_TransmitReceive+0x68>
 8003596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800359a:	2b04      	cmp	r3, #4
 800359c:	d003      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80035a4:	e16d      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x82>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x82>
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80035be:	e160      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d003      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2205      	movs	r2, #5
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	887a      	ldrh	r2, [r7, #2]
 80035ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	887a      	ldrh	r2, [r7, #2]
 80035f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d007      	beq.n	8003628 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003630:	d17c      	bne.n	800372c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x10a>
 800363a:	8b7b      	ldrh	r3, [r7, #26]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d16a      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003664:	e057      	b.n	8003716 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d11b      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x176>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x176>
 800367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d113      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d119      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x1b8>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d014      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	b292      	uxth	r2, r2
 80036d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036ee:	f7fd fcf9 	bl	80010e4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d80b      	bhi.n	8003716 <HAL_SPI_TransmitReceive+0x1e0>
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003704:	d007      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003714:	e0b5      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1a2      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x130>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d19d      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x130>
 800372a:	e080      	b.n	800382e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_TransmitReceive+0x204>
 8003734:	8b7b      	ldrh	r3, [r7, #26]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d16f      	bne.n	800381a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003760:	e05b      	b.n	800381a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d11c      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x274>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x274>
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d114      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d119      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x2b6>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d014      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e8:	2301      	movs	r3, #1
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037ec:	f7fd fc7a 	bl	80010e4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d803      	bhi.n	8003804 <HAL_SPI_TransmitReceive+0x2ce>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003802:	d102      	bne.n	800380a <HAL_SPI_TransmitReceive+0x2d4>
 8003804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003818:	e033      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d19e      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x22c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d199      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8b8 	bl	80039a8 <SPI_EndRxTxTransaction>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800384a:	e01a      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003878:	e003      	b.n	8003882 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800388a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800388e:	4618      	mov	r0, r3
 8003890:	3730      	adds	r7, #48	@ 0x30
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038a8:	f7fd fc1c 	bl	80010e4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038b8:	f7fd fc14 	bl	80010e4 <HAL_GetTick>
 80038bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038be:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	015b      	lsls	r3, r3, #5
 80038c4:	0d1b      	lsrs	r3, r3, #20
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ce:	e054      	b.n	800397a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d6:	d050      	beq.n	800397a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038d8:	f7fd fc04 	bl	80010e4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d902      	bls.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13d      	bne.n	800396a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003906:	d111      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003910:	d004      	beq.n	800391c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391a:	d107      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800392a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003934:	d10f      	bne.n	8003956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e017      	b.n	800399a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3b01      	subs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d19b      	bne.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2201      	movs	r2, #1
 80039bc:	2102      	movs	r1, #2
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff ff6a 	bl	8003898 <SPI_WaitFlagStateUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e032      	b.n	8003a40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <SPI_EndRxTxTransaction+0xa0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <SPI_EndRxTxTransaction+0xa4>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	0d5b      	lsrs	r3, r3, #21
 80039e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f8:	d112      	bne.n	8003a20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2180      	movs	r1, #128	@ 0x80
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff ff47 	bl	8003898 <SPI_WaitFlagStateUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d016      	beq.n	8003a3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e00f      	b.n	8003a40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d0f2      	beq.n	8003a20 <SPI_EndRxTxTransaction+0x78>
 8003a3a:	e000      	b.n	8003a3e <SPI_EndRxTxTransaction+0x96>
        break;
 8003a3c:	bf00      	nop
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	165e9f81 	.word	0x165e9f81

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd f978 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 fa06 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e041      	b.n	8003b84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fd f95f 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 f9b7 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0ae      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	f200 809f 	bhi.w	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bba:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003cf9 	.word	0x08003cf9
 8003bc8:	08003cf9 	.word	0x08003cf9
 8003bcc:	08003cf9 	.word	0x08003cf9
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003cf9 	.word	0x08003cf9
 8003bd8:	08003cf9 	.word	0x08003cf9
 8003bdc:	08003cf9 	.word	0x08003cf9
 8003be0:	08003c77 	.word	0x08003c77
 8003be4:	08003cf9 	.word	0x08003cf9
 8003be8:	08003cf9 	.word	0x08003cf9
 8003bec:	08003cf9 	.word	0x08003cf9
 8003bf0:	08003cb7 	.word	0x08003cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f9dc 	bl	8003fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0208 	orr.w	r2, r2, #8
 8003c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0204 	bic.w	r2, r2, #4
 8003c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]
      break;
 8003c32:	e064      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa22 	bl	8004084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6999      	ldr	r1, [r3, #24]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
      break;
 8003c74:	e043      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fa6d 	bl	800415c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0208 	orr.w	r2, r2, #8
 8003c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0204 	bic.w	r2, r2, #4
 8003ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69d9      	ldr	r1, [r3, #28]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	61da      	str	r2, [r3, #28]
      break;
 8003cb4:	e023      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fab7 	bl	8004230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69d9      	ldr	r1, [r3, #28]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	021a      	lsls	r2, r3, #8
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	61da      	str	r2, [r3, #28]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_ConfigClockSource+0x1c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0b4      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x186>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d64:	d03e      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	f200 8087 	bhi.w	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	f000 8086 	beq.w	8003e82 <HAL_TIM_ConfigClockSource+0x172>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d87f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b70      	cmp	r3, #112	@ 0x70
 8003d7e:	d01a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d80:	2b70      	cmp	r3, #112	@ 0x70
 8003d82:	d87b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b60      	cmp	r3, #96	@ 0x60
 8003d86:	d050      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x11a>
 8003d88:	2b60      	cmp	r3, #96	@ 0x60
 8003d8a:	d877      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b50      	cmp	r3, #80	@ 0x50
 8003d8e:	d03c      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xfa>
 8003d90:	2b50      	cmp	r3, #80	@ 0x50
 8003d92:	d873      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	d058      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x13a>
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d86f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b30      	cmp	r3, #48	@ 0x30
 8003d9e:	d064      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b30      	cmp	r3, #48	@ 0x30
 8003da2:	d86b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d060      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d867      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d05a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	e062      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc6:	f000 fafd 	bl	80043c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	609a      	str	r2, [r3, #8]
      break;
 8003de2:	e04f      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df4:	f000 fae6 	bl	80043c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e03c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 fa5a 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2150      	movs	r1, #80	@ 0x50
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fab3 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003e28:	e02c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 fa79 	bl	800432e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2160      	movs	r1, #96	@ 0x60
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 faa3 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003e48:	e01c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 fa3a 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	@ 0x40
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fa93 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003e68:	e00c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 fa8a 	bl	800438e <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e003      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e000      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	@ (8003f9c <TIM_Base_SetConfig+0xfc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_Base_SetConfig+0x38>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x38>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a37      	ldr	r2, [pc, #220]	@ (8003fa0 <TIM_Base_SetConfig+0x100>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x38>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a36      	ldr	r2, [pc, #216]	@ (8003fa4 <TIM_Base_SetConfig+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <TIM_Base_SetConfig+0x108>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <TIM_Base_SetConfig+0xfc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01b      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef8:	d017      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <TIM_Base_SetConfig+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a27      	ldr	r2, [pc, #156]	@ (8003fa4 <TIM_Base_SetConfig+0x104>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00f      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	@ (8003fa8 <TIM_Base_SetConfig+0x108>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	@ (8003fac <TIM_Base_SetConfig+0x10c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a24      	ldr	r2, [pc, #144]	@ (8003fb0 <TIM_Base_SetConfig+0x110>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a23      	ldr	r2, [pc, #140]	@ (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d108      	bne.n	8003f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0e      	ldr	r2, [pc, #56]	@ (8003f9c <TIM_Base_SetConfig+0xfc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	611a      	str	r2, [r3, #16]
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f023 0201 	bic.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 0302 	bic.w	r3, r3, #2
 8004000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <TIM_OC1_SetConfig+0xc8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10c      	bne.n	800402e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0308 	bic.w	r3, r3, #8
 800401a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <TIM_OC1_SetConfig+0xc8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d111      	bne.n	800405a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40010000 	.word	0x40010000

08004084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f023 0210 	bic.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0320 	bic.w	r3, r3, #32
 80040ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1e      	ldr	r2, [pc, #120]	@ (8004158 <TIM_OC2_SetConfig+0xd4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10d      	bne.n	8004100 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <TIM_OC2_SetConfig+0xd4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d113      	bne.n	8004130 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800410e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40010000 	.word	0x40010000

0800415c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	@ (800422c <TIM_OC3_SetConfig+0xd0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a14      	ldr	r2, [pc, #80]	@ (800422c <TIM_OC3_SetConfig+0xd0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d113      	bne.n	8004206 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40010000 	.word	0x40010000

08004230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a10      	ldr	r2, [pc, #64]	@ (80042cc <TIM_OC4_SetConfig+0x9c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d109      	bne.n	80042a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000

080042d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 030a 	bic.w	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 0210 	bic.w	r2, r3, #16
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800436a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f043 0307 	orr.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	609a      	str	r2, [r3, #8]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e050      	b.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d013      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a16      	ldr	r2, [pc, #88]	@ (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a15      	ldr	r2, [pc, #84]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a13      	ldr	r2, [pc, #76]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10c      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40014000 	.word	0x40014000

080044e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 001c 	add.w	r0, r7, #28
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d123      	bne.n	8004542 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800450e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fae2 	bl	8005b00 <USB_CoreReset>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e01b      	b.n	800457a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fad6 	bl	8005b00 <USB_CoreReset>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38
 800456c:	e005      	b.n	800457a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800457a:	7fbb      	ldrb	r3, [r7, #30]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10b      	bne.n	8004598 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f043 0206 	orr.w	r2, r3, #6
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a4:	b004      	add	sp, #16
 80045a6:	4770      	bx	lr

080045a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d165      	bne.n	8004688 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a41      	ldr	r2, [pc, #260]	@ (80046c4 <USB_SetTurnaroundTime+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d906      	bls.n	80045d2 <USB_SetTurnaroundTime+0x2a>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a40      	ldr	r2, [pc, #256]	@ (80046c8 <USB_SetTurnaroundTime+0x120>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d202      	bcs.n	80045d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045cc:	230f      	movs	r3, #15
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e062      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a3c      	ldr	r2, [pc, #240]	@ (80046c8 <USB_SetTurnaroundTime+0x120>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d306      	bcc.n	80045e8 <USB_SetTurnaroundTime+0x40>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a3b      	ldr	r2, [pc, #236]	@ (80046cc <USB_SetTurnaroundTime+0x124>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d202      	bcs.n	80045e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045e2:	230e      	movs	r3, #14
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e057      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a38      	ldr	r2, [pc, #224]	@ (80046cc <USB_SetTurnaroundTime+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d306      	bcc.n	80045fe <USB_SetTurnaroundTime+0x56>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a37      	ldr	r2, [pc, #220]	@ (80046d0 <USB_SetTurnaroundTime+0x128>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d202      	bcs.n	80045fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045f8:	230d      	movs	r3, #13
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e04c      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <USB_SetTurnaroundTime+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d306      	bcc.n	8004614 <USB_SetTurnaroundTime+0x6c>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a32      	ldr	r2, [pc, #200]	@ (80046d4 <USB_SetTurnaroundTime+0x12c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800460e:	230c      	movs	r3, #12
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e041      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a2f      	ldr	r2, [pc, #188]	@ (80046d4 <USB_SetTurnaroundTime+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d906      	bls.n	800462a <USB_SetTurnaroundTime+0x82>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a2e      	ldr	r2, [pc, #184]	@ (80046d8 <USB_SetTurnaroundTime+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d802      	bhi.n	800462a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004624:	230b      	movs	r3, #11
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e036      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <USB_SetTurnaroundTime+0x130>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d906      	bls.n	8004640 <USB_SetTurnaroundTime+0x98>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <USB_SetTurnaroundTime+0x134>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800463a:	230a      	movs	r3, #10
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e02b      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a26      	ldr	r2, [pc, #152]	@ (80046dc <USB_SetTurnaroundTime+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0xae>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a25      	ldr	r2, [pc, #148]	@ (80046e0 <USB_SetTurnaroundTime+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d202      	bcs.n	8004656 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004650:	2309      	movs	r3, #9
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e020      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <USB_SetTurnaroundTime+0x138>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d306      	bcc.n	800466c <USB_SetTurnaroundTime+0xc4>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a20      	ldr	r2, [pc, #128]	@ (80046e4 <USB_SetTurnaroundTime+0x13c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004666:	2308      	movs	r3, #8
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e015      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <USB_SetTurnaroundTime+0x13c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0xda>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <USB_SetTurnaroundTime+0x140>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d202      	bcs.n	8004682 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800467c:	2307      	movs	r3, #7
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e00a      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004682:	2306      	movs	r3, #6
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e007      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800468e:	2309      	movs	r3, #9
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e001      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004694:	2309      	movs	r3, #9
 8004696:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	00d8acbf 	.word	0x00d8acbf
 80046c8:	00e4e1c0 	.word	0x00e4e1c0
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	01067380 	.word	0x01067380
 80046d4:	011a499f 	.word	0x011a499f
 80046d8:	01312cff 	.word	0x01312cff
 80046dc:	014ca43f 	.word	0x014ca43f
 80046e0:	016e3600 	.word	0x016e3600
 80046e4:	01a6ab1f 	.word	0x01a6ab1f
 80046e8:	01e84800 	.word	0x01e84800

080046ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d115      	bne.n	800477e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800475e:	200a      	movs	r0, #10
 8004760:	f7fc fccc 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	330a      	adds	r3, #10
 8004768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 f939 	bl	80059e2 <USB_GetMode>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d01e      	beq.n	80047b4 <USB_SetCurrentMode+0x84>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2bc7      	cmp	r3, #199	@ 0xc7
 800477a:	d9f0      	bls.n	800475e <USB_SetCurrentMode+0x2e>
 800477c:	e01a      	b.n	80047b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d115      	bne.n	80047b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004790:	200a      	movs	r0, #10
 8004792:	f7fc fcb3 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	330a      	adds	r3, #10
 800479a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f920 	bl	80059e2 <USB_GetMode>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <USB_SetCurrentMode+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80047ac:	d9f0      	bls.n	8004790 <USB_SetCurrentMode+0x60>
 80047ae:	e001      	b.n	80047b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e005      	b.n	80047c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80047b8:	d101      	bne.n	80047be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c8:	b084      	sub	sp, #16
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e009      	b.n	80047fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3340      	adds	r3, #64	@ 0x40
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3301      	adds	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b0e      	cmp	r3, #14
 8004800:	d9f2      	bls.n	80047e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11c      	bne.n	8004844 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
 8004842:	e00b      	b.n	800485c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004868:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10d      	bne.n	800488c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f968 	bl	8004b50 <USB_SetDevSpeed>
 8004880:	e008      	b.n	8004894 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004882:	2101      	movs	r1, #1
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f963 	bl	8004b50 <USB_SetDevSpeed>
 800488a:	e003      	b.n	8004894 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800488c:	2103      	movs	r1, #3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f95e 	bl	8004b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004894:	2110      	movs	r1, #16
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8fa 	bl	8004a90 <USB_FlushTxFifo>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f924 	bl	8004af4 <USB_FlushRxFifo>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	461a      	mov	r2, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e043      	b.n	8004968 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f6:	d118      	bne.n	800492a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e013      	b.n	800493c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004920:	461a      	mov	r2, r3
 8004922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e008      	b.n	800493c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004936:	461a      	mov	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3301      	adds	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800496c:	461a      	mov	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4293      	cmp	r3, r2
 8004972:	d3b5      	bcc.n	80048e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e043      	b.n	8004a02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800498c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004990:	d118      	bne.n	80049c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e013      	b.n	80049d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d0:	461a      	mov	r2, r3
 80049d2:	2300      	movs	r3, #0
 80049d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	2300      	movs	r3, #0
 80049e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3301      	adds	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a06:	461a      	mov	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d3b5      	bcc.n	800497a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <USB_DevInit+0x2c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0208 	orr.w	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a88:	b004      	add	sp, #16
 8004a8a:	4770      	bx	lr
 8004a8c:	803c3800 	.word	0x803c3800

08004a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aaa:	d901      	bls.n	8004ab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e01b      	b.n	8004ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	daf2      	bge.n	8004a9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	019b      	lsls	r3, r3, #6
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ad4:	d901      	bls.n	8004ada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d0f0      	beq.n	8004ac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b0c:	d901      	bls.n	8004b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e018      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	daf2      	bge.n	8004b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2210      	movs	r2, #16
 8004b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e006      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d0f0      	beq.n	8004b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
 8004ba6:	e00a      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d002      	beq.n	8004bb4 <USB_GetDevSpeed+0x32>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d102      	bne.n	8004bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
 8004bb8:	e001      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d13a      	bne.n	8004c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d155      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	791b      	ldrb	r3, [r3, #4]
 8004c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e036      	b.n	8004ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11a      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	791b      	ldrb	r3, [r3, #4]
 8004cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d161      	bne.n	8004dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0e:	d11f      	bne.n	8004d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d70:	4013      	ands	r3, r2
 8004d72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d94:	4013      	ands	r3, r2
 8004d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	4619      	mov	r1, r3
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <USB_DeactivateEndpoint+0x1b0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	e060      	b.n	8004e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd2:	d11f      	bne.n	8004e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0159      	lsls	r1, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e76:	4619      	mov	r1, r3
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <USB_DeactivateEndpoint+0x1b4>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	ec337800 	.word	0xec337800
 8004e90:	eff37800 	.word	0xeff37800

08004e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 817a 	bne.w	80051aa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d132      	bne.n	8004f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004edc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1c:	0cdb      	lsrs	r3, r3, #19
 8004f1e:	04db      	lsls	r3, r3, #19
 8004f20:	6113      	str	r3, [r2, #16]
 8004f22:	e092      	b.n	800504a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3e:	0cdb      	lsrs	r3, r3, #19
 8004f40:	04db      	lsls	r3, r3, #19
 8004f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11a      	bne.n	8004fa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d903      	bls.n	8004f82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fa0:	6113      	str	r3, [r2, #16]
 8004fa2:	e01b      	b.n	8004fdc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	440b      	add	r3, r1
 8004fbc:	1e59      	subs	r1, r3, #1
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fc8:	4ba2      	ldr	r3, [pc, #648]	@ (8005254 <USB_EPStartXfer+0x3c0>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	69b9      	ldr	r1, [r7, #24]
 8004ff4:	0148      	lsls	r0, r1, #5
 8004ff6:	69f9      	ldr	r1, [r7, #28]
 8004ff8:	4401      	add	r1, r0
 8004ffa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	791b      	ldrb	r3, [r3, #4]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d11f      	bne.n	800504a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005024:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005028:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005044:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005048:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d14b      	bne.n	80050e8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	791b      	ldrb	r3, [r3, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d128      	bne.n	80050c6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d110      	bne.n	80050a6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e00f      	b.n	80050c6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e165      	b.n	80053b4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005102:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005106:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d015      	beq.n	800513c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 814d 	beq.w	80053b4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	2101      	movs	r1, #1
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005136:	4313      	orrs	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	@ 0x34
 800513a:	e13b      	b.n	80053b4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d110      	bne.n	800516e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005166:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e00f      	b.n	800518e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68d9      	ldr	r1, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	b298      	uxth	r0, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4603      	mov	r3, r0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f9b8 	bl	8005518 <USB_WritePacket>
 80051a8:	e104      	b.n	80053b4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c4:	0cdb      	lsrs	r3, r3, #19
 80051c6:	04db      	lsls	r3, r3, #19
 80051c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051ec:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d131      	bne.n	8005258 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	0148      	lsls	r0, r1, #5
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	4401      	add	r1, r0
 800522a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800522e:	4313      	orrs	r3, r2
 8005230:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800524c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005250:	6113      	str	r3, [r2, #16]
 8005252:	e061      	b.n	8005318 <USB_EPStartXfer+0x484>
 8005254:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d123      	bne.n	80052a8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	0148      	lsls	r0, r1, #5
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	4401      	add	r1, r0
 800527e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052a4:	6113      	str	r3, [r2, #16]
 80052a6:	e037      	b.n	8005318 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4413      	add	r3, r2
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	8afa      	ldrh	r2, [r7, #22]
 80052c4:	fb03 f202 	mul.w	r2, r3, r2
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	04d9      	lsls	r1, r3, #19
 80052de:	4b38      	ldr	r3, [pc, #224]	@ (80053c0 <USB_EPStartXfer+0x52c>)
 80052e0:	400b      	ands	r3, r1
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	0148      	lsls	r0, r1, #5
 80052e6:	69f9      	ldr	r1, [r7, #28]
 80052e8:	4401      	add	r1, r0
 80052ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	0148      	lsls	r0, r1, #5
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	4401      	add	r1, r0
 8005310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005314:	4313      	orrs	r3, r2
 8005316:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10d      	bne.n	800533a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68d9      	ldr	r1, [r3, #12]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	460a      	mov	r2, r1
 8005338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d128      	bne.n	8005394 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d110      	bne.n	8005374 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800536c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00f      	b.n	8005394 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	1ff80000 	.word	0x1ff80000

080053c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d14a      	bne.n	8005478 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fa:	f040 8086 	bne.w	800550a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005420:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005452:	4293      	cmp	r3, r2
 8005454:	d902      	bls.n	800545c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
          break;
 800545a:	e056      	b.n	800550a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005474:	d0e7      	beq.n	8005446 <USB_EPStopXfer+0x82>
 8005476:	e048      	b.n	800550a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800548c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005490:	d13b      	bne.n	800550a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d902      	bls.n	80054f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
          break;
 80054ee:	e00c      	b.n	800550a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005508:	d0e7      	beq.n	80054da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800550a:	7dfb      	ldrb	r3, [r7, #23]
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	@ 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	460b      	mov	r3, r1
 8005528:	71fb      	strb	r3, [r7, #7]
 800552a:	4613      	mov	r3, r2
 800552c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d123      	bne.n	8005586 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800553e:	88bb      	ldrh	r3, [r7, #4]
 8005540:	3303      	adds	r3, #3
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e018      	b.n	800557e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	031a      	lsls	r2, r3, #12
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005558:	461a      	mov	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	3301      	adds	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3301      	adds	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d3e2      	bcc.n	800554c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3724      	adds	r7, #36	@ 0x24
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005594:	b480      	push	{r7}
 8005596:	b08b      	sub	sp, #44	@ 0x2c
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	e014      	b.n	80055ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	3301      	adds	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	3301      	adds	r3, #1
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	3301      	adds	r3, #1
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	3301      	adds	r3, #1
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3e6      	bcc.n	80055c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055f2:	8bfb      	ldrh	r3, [r7, #30]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01e      	beq.n	8005636 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005602:	461a      	mov	r2, r3
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	701a      	strb	r2, [r3, #0]
      i++;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	3301      	adds	r3, #1
 8005622:	623b      	str	r3, [r7, #32]
      pDest++;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	3301      	adds	r3, #1
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800562a:	8bfb      	ldrh	r3, [r7, #30]
 800562c:	3b01      	subs	r3, #1
 800562e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ea      	bne.n	800560c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005638:	4618      	mov	r0, r3
 800563a:	372c      	adds	r7, #44	@ 0x2c
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d12c      	bne.n	80056ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db12      	blt.n	8005698 <USB_EPSetStall+0x54>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005696:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e02b      	b.n	8005712 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db12      	blt.n	80056f2 <USB_EPSetStall+0xae>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00f      	beq.n	80056f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d128      	bne.n	800578e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800575a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d003      	beq.n	800576c <USB_EPClearStall+0x4c>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d138      	bne.n	80057de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e027      	b.n	80057de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d003      	beq.n	80057be <USB_EPClearStall+0x9e>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d10f      	bne.n	80057de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800580a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800580e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005866:	f023 0302 	bic.w	r3, r3, #2
 800586a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0c1b      	lsrs	r3, r3, #16
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	b29b      	uxth	r3, r3
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4013      	ands	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005978:	68bb      	ldr	r3, [r7, #8]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4013      	ands	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059d4:	68bb      	ldr	r3, [r7, #8]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0301 	and.w	r3, r3, #1
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a1c:	f023 0307 	bic.w	r3, r3, #7
 8005a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	333c      	adds	r3, #60	@ 0x3c
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <USB_EP0_OutStart+0xb8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d90a      	bls.n	8005a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a78:	d101      	bne.n	8005a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e037      	b.n	8005aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aac:	f043 0318 	orr.w	r3, r3, #24
 8005ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10f      	bne.n	8005aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	4f54300a 	.word	0x4f54300a

08005b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e01b      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b42:	d901      	bls.n	8005b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d0f0      	beq.n	8005b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b74:	f002 fc2c 	bl	80083d0 <USBD_static_malloc>
 8005b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32b0      	adds	r2, #176	@ 0xb0
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b90:	2302      	movs	r3, #2
 8005b92:	e0d4      	b.n	8005d3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005b98:	2100      	movs	r1, #0
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f002 fc5c 	bl	8008458 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32b0      	adds	r2, #176	@ 0xb0
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32b0      	adds	r2, #176	@ 0xb0
 8005bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7c1b      	ldrb	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d138      	bne.n	8005c3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005bce:	7819      	ldrb	r1, [r3, #0]
 8005bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f002 fad7 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	3324      	adds	r3, #36	@ 0x24
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bf6:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005bf8:	7819      	ldrb	r1, [r3, #0]
 8005bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bfe:	2202      	movs	r2, #2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 fac2 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c1e:	2201      	movs	r2, #1
 8005c20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c22:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f003 020f 	and.w	r2, r3, #15
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3326      	adds	r3, #38	@ 0x26
 8005c38:	2210      	movs	r2, #16
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e035      	b.n	8005caa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c3e:	4b42      	ldr	r3, [pc, #264]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005c40:	7819      	ldrb	r1, [r3, #0]
 8005c42:	2340      	movs	r3, #64	@ 0x40
 8005c44:	2202      	movs	r2, #2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f002 fa9f 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	2201      	movs	r2, #1
 8005c64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c66:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c68:	7819      	ldrb	r1, [r3, #0]
 8005c6a:	2340      	movs	r3, #64	@ 0x40
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f002 fa8b 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c74:	4b35      	ldr	r3, [pc, #212]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c90:	4b2f      	ldr	r3, [pc, #188]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3326      	adds	r3, #38	@ 0x26
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005cac:	7819      	ldrb	r1, [r3, #0]
 8005cae:	2308      	movs	r3, #8
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 fa69 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3324      	adds	r3, #36	@ 0x24
 8005cce:	2201      	movs	r2, #1
 8005cd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	33b0      	adds	r3, #176	@ 0xb0
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e018      	b.n	8005d3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7c1b      	ldrb	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d14:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005d16:	7819      	ldrb	r1, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f002 fb20 	bl	8008368 <USBD_LL_PrepareReceive>
 8005d28:	e008      	b.n	8005d3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d2a:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005d2c:	7819      	ldrb	r1, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fb16 	bl	8008368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000093 	.word	0x20000093
 8005d4c:	20000094 	.word	0x20000094
 8005d50:	20000095 	.word	0x20000095

08005d54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d60:	4b3a      	ldr	r3, [pc, #232]	@ (8005e4c <USBD_CDC_DeInit+0xf8>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fa35 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d6c:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <USBD_CDC_DeInit+0xf8>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3324      	adds	r3, #36	@ 0x24
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d86:	4b32      	ldr	r3, [pc, #200]	@ (8005e50 <USBD_CDC_DeInit+0xfc>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fa22 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d92:	4b2f      	ldr	r3, [pc, #188]	@ (8005e50 <USBD_CDC_DeInit+0xfc>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005daa:	2200      	movs	r2, #0
 8005dac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005dae:	4b29      	ldr	r3, [pc, #164]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 fa0e 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005dba:	4b26      	ldr	r3, [pc, #152]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	3324      	adds	r3, #36	@ 0x24
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3326      	adds	r3, #38	@ 0x26
 8005dea:	2200      	movs	r2, #0
 8005dec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	@ 0xb0
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	33b0      	adds	r3, #176	@ 0xb0
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32b0      	adds	r2, #176	@ 0xb0
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f002 fae2 	bl	80083ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32b0      	adds	r2, #176	@ 0xb0
 8005e32:	2100      	movs	r1, #0
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000093 	.word	0x20000093
 8005e50:	20000094 	.word	0x20000094
 8005e54:	20000095 	.word	0x20000095

08005e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	32b0      	adds	r2, #176	@ 0xb0
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0bf      	b.n	8006008 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d050      	beq.n	8005f36 <USBD_CDC_Setup+0xde>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	f040 80af 	bne.w	8005ff8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88db      	ldrh	r3, [r3, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03a      	beq.n	8005f18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da1b      	bge.n	8005ee4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	33b0      	adds	r3, #176	@ 0xb0
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ec2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	88d2      	ldrh	r2, [r2, #6]
 8005ec8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	bf28      	it	cs
 8005ed2:	2307      	movcs	r3, #7
 8005ed4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	89fa      	ldrh	r2, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fd47 	bl	8007970 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ee2:	e090      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	785a      	ldrb	r2, [r3, #1]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ef4:	d803      	bhi.n	8005efe <USBD_CDC_Setup+0xa6>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	88db      	ldrh	r3, [r3, #6]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	e000      	b.n	8005f00 <USBD_CDC_Setup+0xa8>
 8005efe:	2240      	movs	r2, #64	@ 0x40
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f06:	6939      	ldr	r1, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fd59 	bl	80079c8 <USBD_CtlPrepareRx>
      break;
 8005f16:	e076      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	33b0      	adds	r3, #176	@ 0xb0
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	7850      	ldrb	r0, [r2, #1]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	4798      	blx	r3
      break;
 8005f34:	e067      	b.n	8006006 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b0b      	cmp	r3, #11
 8005f3c:	d851      	bhi.n	8005fe2 <USBD_CDC_Setup+0x18a>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <USBD_CDC_Setup+0xec>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f75 	.word	0x08005f75
 8005f48:	08005ff1 	.word	0x08005ff1
 8005f4c:	08005fe3 	.word	0x08005fe3
 8005f50:	08005fe3 	.word	0x08005fe3
 8005f54:	08005fe3 	.word	0x08005fe3
 8005f58:	08005fe3 	.word	0x08005fe3
 8005f5c:	08005fe3 	.word	0x08005fe3
 8005f60:	08005fe3 	.word	0x08005fe3
 8005f64:	08005fe3 	.word	0x08005fe3
 8005f68:	08005fe3 	.word	0x08005fe3
 8005f6c:	08005f9f 	.word	0x08005f9f
 8005f70:	08005fc9 	.word	0x08005fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d107      	bne.n	8005f90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f80:	f107 030a 	add.w	r3, r7, #10
 8005f84:	2202      	movs	r2, #2
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fcf1 	bl	8007970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f8e:	e032      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fc7b 	bl	800788e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f9c:	e02b      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d107      	bne.n	8005fba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005faa:	f107 030d 	add.w	r3, r7, #13
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fcdc 	bl	8007970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fb8:	e01d      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fc66 	bl	800788e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc6:	e016      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d00f      	beq.n	8005ff4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 fc59 	bl	800788e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fe0:	e008      	b.n	8005ff4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 fc52 	bl	800788e <USBD_CtlError>
          ret = USBD_FAIL;
 8005fea:	2303      	movs	r3, #3
 8005fec:	75fb      	strb	r3, [r7, #23]
          break;
 8005fee:	e002      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
          break;
 8005ff0:	bf00      	nop
 8005ff2:	e008      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
          break;
 8005ff4:	bf00      	nop
      }
      break;
 8005ff6:	e006      	b.n	8006006 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fc47 	bl	800788e <USBD_CtlError>
      ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
      break;
 8006004:	bf00      	nop
  }

  return (uint8_t)ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	32b0      	adds	r2, #176	@ 0xb0
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006036:	2303      	movs	r3, #3
 8006038:	e065      	b.n	8006106 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	32b0      	adds	r2, #176	@ 0xb0
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3318      	adds	r3, #24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02f      	beq.n	80060c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3318      	adds	r3, #24
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	f003 010f 	and.w	r1, r3, #15
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	460b      	mov	r3, r1
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4403      	add	r3, r0
 800608c:	331c      	adds	r3, #28
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	fbb2 f1f3 	udiv	r1, r2, r3
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800609a:	2b00      	cmp	r3, #0
 800609c:	d112      	bne.n	80060c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3318      	adds	r3, #24
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060b6:	78f9      	ldrb	r1, [r7, #3]
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f002 f932 	bl	8008326 <USBD_LL_Transmit>
 80060c2:	e01f      	b.n	8006104 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	33b0      	adds	r3, #176	@ 0xb0
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	33b0      	adds	r3, #176	@ 0xb0
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	32b0      	adds	r2, #176	@ 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	32b0      	adds	r2, #176	@ 0xb0
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	e01a      	b.n	8006176 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 f930 	bl	80083aa <USBD_LL_GetRxDataSize>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	33b0      	adds	r3, #176	@ 0xb0
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006170:	4611      	mov	r1, r2
 8006172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	32b0      	adds	r2, #176	@ 0xb0
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e024      	b.n	80061ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	33b0      	adds	r3, #176	@ 0xb0
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d019      	beq.n	80061e8 <USBD_CDC_EP0_RxReady+0x6a>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80061ba:	2bff      	cmp	r3, #255	@ 0xff
 80061bc:	d014      	beq.n	80061e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	33b0      	adds	r3, #176	@ 0xb0
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80061d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061fc:	2182      	movs	r1, #130	@ 0x82
 80061fe:	4818      	ldr	r0, [pc, #96]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006200:	f000 fd0f 	bl	8006c22 <USBD_GetEpDesc>
 8006204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006206:	2101      	movs	r1, #1
 8006208:	4815      	ldr	r0, [pc, #84]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800620a:	f000 fd0a 	bl	8006c22 <USBD_GetEpDesc>
 800620e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006210:	2181      	movs	r1, #129	@ 0x81
 8006212:	4813      	ldr	r0, [pc, #76]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006214:	f000 fd05 	bl	8006c22 <USBD_GetEpDesc>
 8006218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2210      	movs	r2, #16
 8006224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d006      	beq.n	800623a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2200      	movs	r2, #0
 8006230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006234:	711a      	strb	r2, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006248:	711a      	strb	r2, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2243      	movs	r2, #67	@ 0x43
 8006252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006254:	4b02      	ldr	r3, [pc, #8]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000050 	.word	0x20000050

08006264 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800626c:	2182      	movs	r1, #130	@ 0x82
 800626e:	4818      	ldr	r0, [pc, #96]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006270:	f000 fcd7 	bl	8006c22 <USBD_GetEpDesc>
 8006274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006276:	2101      	movs	r1, #1
 8006278:	4815      	ldr	r0, [pc, #84]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800627a:	f000 fcd2 	bl	8006c22 <USBD_GetEpDesc>
 800627e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006280:	2181      	movs	r1, #129	@ 0x81
 8006282:	4813      	ldr	r0, [pc, #76]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006284:	f000 fccd 	bl	8006c22 <USBD_GetEpDesc>
 8006288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2210      	movs	r2, #16
 8006294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d006      	beq.n	80062aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2200      	movs	r2, #0
 80062a0:	711a      	strb	r2, [r3, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f042 0202 	orr.w	r2, r2, #2
 80062a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	711a      	strb	r2, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f042 0202 	orr.w	r2, r2, #2
 80062bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2243      	movs	r2, #67	@ 0x43
 80062c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000050 	.word	0x20000050

080062d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062dc:	2182      	movs	r1, #130	@ 0x82
 80062de:	4818      	ldr	r0, [pc, #96]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062e0:	f000 fc9f 	bl	8006c22 <USBD_GetEpDesc>
 80062e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062e6:	2101      	movs	r1, #1
 80062e8:	4815      	ldr	r0, [pc, #84]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062ea:	f000 fc9a 	bl	8006c22 <USBD_GetEpDesc>
 80062ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062f0:	2181      	movs	r1, #129	@ 0x81
 80062f2:	4813      	ldr	r0, [pc, #76]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062f4:	f000 fc95 	bl	8006c22 <USBD_GetEpDesc>
 80062f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2210      	movs	r2, #16
 8006304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2200      	movs	r2, #0
 8006310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006314:	711a      	strb	r2, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2243      	movs	r2, #67	@ 0x43
 8006332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006334:	4b02      	ldr	r3, [pc, #8]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000050 	.word	0x20000050

08006344 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	220a      	movs	r2, #10
 8006350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006352:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	2000000c 	.word	0x2000000c

08006364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e009      	b.n	800638c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	33b0      	adds	r3, #176	@ 0xb0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	32b0      	adds	r2, #176	@ 0xb0
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e008      	b.n	80063d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	32b0      	adds	r2, #176	@ 0xb0
 80063f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e004      	b.n	800640a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32b0      	adds	r2, #176	@ 0xb0
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	32b0      	adds	r2, #176	@ 0xb0
 800643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006442:	2303      	movs	r3, #3
 8006444:	e018      	b.n	8006478 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7c1b      	ldrb	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <USBD_CDC_ReceivePacket+0x68>)
 8006450:	7819      	ldrb	r1, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 ff83 	bl	8008368 <USBD_LL_PrepareReceive>
 8006462:	e008      	b.n	8006476 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <USBD_CDC_ReceivePacket+0x68>)
 8006466:	7819      	ldrb	r1, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800646e:	2340      	movs	r3, #64	@ 0x40
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 ff79 	bl	8008368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000094 	.word	0x20000094

08006484 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	e01f      	b.n	80064dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	79fa      	ldrb	r2, [r7, #7]
 80064ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 fdf3 	bl	80080bc <USBD_LL_Init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e025      	b.n	8006548 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00f      	beq.n	8006538 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	@ 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	f107 020e 	add.w	r2, r7, #14
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fdfb 	bl	8008154 <USBD_LL_Start>
 800655e:	4603      	mov	r3, r0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	4611      	mov	r1, r2
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	4611      	mov	r1, r2
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f90c 	bl	800781a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2b02      	cmp	r3, #2
 8006624:	d01a      	beq.n	800665c <USBD_LL_SetupStage+0x72>
 8006626:	2b02      	cmp	r3, #2
 8006628:	d822      	bhi.n	8006670 <USBD_LL_SetupStage+0x86>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <USBD_LL_SetupStage+0x4a>
 800662e:	2b01      	cmp	r3, #1
 8006630:	d00a      	beq.n	8006648 <USBD_LL_SetupStage+0x5e>
 8006632:	e01d      	b.n	8006670 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb63 	bl	8006d08 <USBD_StdDevReq>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
      break;
 8006646:	e020      	b.n	800668a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fbcb 	bl	8006dec <USBD_StdItfReq>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e016      	b.n	800668a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fc2d 	bl	8006ec4 <USBD_StdEPReq>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	e00c      	b.n	800668a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006676:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800667a:	b2db      	uxtb	r3, r3
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fdc8 	bl	8008214 <USBD_LL_StallEP>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
      break;
 8006688:	bf00      	nop
  }

  return ret;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	460b      	mov	r3, r1
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d16e      	bne.n	800678a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80066b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	f040 8098 	bne.w	80067f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d913      	bls.n	80066f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	1ad2      	subs	r2, r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bf28      	it	cs
 80066e6:	4613      	movcs	r3, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 f988 	bl	8007a02 <USBD_CtlContinueRx>
 80066f2:	e07d      	b.n	80067f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d014      	beq.n	800672c <USBD_LL_DataOutStage+0x98>
 8006702:	2b02      	cmp	r3, #2
 8006704:	d81d      	bhi.n	8006742 <USBD_LL_DataOutStage+0xae>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <USBD_LL_DataOutStage+0x7c>
 800670a:	2b01      	cmp	r3, #1
 800670c:	d003      	beq.n	8006716 <USBD_LL_DataOutStage+0x82>
 800670e:	e018      	b.n	8006742 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	75bb      	strb	r3, [r7, #22]
            break;
 8006714:	e018      	b.n	8006748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800671c:	b2db      	uxtb	r3, r3
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fa64 	bl	8006bee <USBD_CoreFindIF>
 8006726:	4603      	mov	r3, r0
 8006728:	75bb      	strb	r3, [r7, #22]
            break;
 800672a:	e00d      	b.n	8006748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4619      	mov	r1, r3
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fa66 	bl	8006c08 <USBD_CoreFindEP>
 800673c:	4603      	mov	r3, r0
 800673e:	75bb      	strb	r3, [r7, #22]
            break;
 8006740:	e002      	b.n	8006748 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	75bb      	strb	r3, [r7, #22]
            break;
 8006746:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006748:	7dbb      	ldrb	r3, [r7, #22]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d119      	bne.n	8006782 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d113      	bne.n	8006782 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800675a:	7dba      	ldrb	r2, [r7, #22]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	32ae      	adds	r2, #174	@ 0xae
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800676a:	7dba      	ldrb	r2, [r7, #22]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006772:	7dba      	ldrb	r2, [r7, #22]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	32ae      	adds	r2, #174	@ 0xae
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f001 f94e 	bl	8007a24 <USBD_CtlSendStatus>
 8006788:	e032      	b.n	80067f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa37 	bl	8006c08 <USBD_CoreFindEP>
 800679a:	4603      	mov	r3, r0
 800679c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800679e:	7dbb      	ldrb	r3, [r7, #22]
 80067a0:	2bff      	cmp	r3, #255	@ 0xff
 80067a2:	d025      	beq.n	80067f0 <USBD_LL_DataOutStage+0x15c>
 80067a4:	7dbb      	ldrb	r3, [r7, #22]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d122      	bne.n	80067f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d117      	bne.n	80067e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80067b6:	7dba      	ldrb	r2, [r7, #22]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	32ae      	adds	r2, #174	@ 0xae
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00f      	beq.n	80067e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80067c6:	7dba      	ldrb	r2, [r7, #22]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067ce:	7dba      	ldrb	r2, [r7, #22]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	32ae      	adds	r2, #174	@ 0xae
 80067d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	7afa      	ldrb	r2, [r7, #11]
 80067dc:	4611      	mov	r1, r2
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	e000      	b.n	80067f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	460b      	mov	r3, r1
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d16f      	bne.n	80068ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3314      	adds	r3, #20
 8006812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800681a:	2b02      	cmp	r3, #2
 800681c:	d15a      	bne.n	80068d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d914      	bls.n	8006854 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	461a      	mov	r2, r3
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f001 f8b0 	bl	80079a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006846:	2300      	movs	r3, #0
 8006848:	2200      	movs	r2, #0
 800684a:	2100      	movs	r1, #0
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f001 fd8b 	bl	8008368 <USBD_LL_PrepareReceive>
 8006852:	e03f      	b.n	80068d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	d11c      	bne.n	800689a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006868:	429a      	cmp	r2, r3
 800686a:	d316      	bcc.n	800689a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006876:	429a      	cmp	r2, r3
 8006878:	d20f      	bcs.n	800689a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 f891 	bl	80079a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f001 fd68 	bl	8008368 <USBD_LL_PrepareReceive>
 8006898:	e01c      	b.n	80068d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d10f      	bne.n	80068c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c6:	2180      	movs	r1, #128	@ 0x80
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f001 fca3 	bl	8008214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 f8bb 	bl	8007a4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d03a      	beq.n	8006954 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fe42 	bl	8006568 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80068ec:	e032      	b.n	8006954 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	4619      	mov	r1, r3
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f985 	bl	8006c08 <USBD_CoreFindEP>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	2bff      	cmp	r3, #255	@ 0xff
 8006906:	d025      	beq.n	8006954 <USBD_LL_DataInStage+0x15a>
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d122      	bne.n	8006954 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b03      	cmp	r3, #3
 8006918:	d11c      	bne.n	8006954 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800691a:	7dfa      	ldrb	r2, [r7, #23]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	32ae      	adds	r2, #174	@ 0xae
 8006920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d014      	beq.n	8006954 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800692a:	7dfa      	ldrb	r2, [r7, #23]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006932:	7dfa      	ldrb	r2, [r7, #23]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	32ae      	adds	r2, #174	@ 0xae
 8006938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	7afa      	ldrb	r2, [r7, #11]
 8006940:	4611      	mov	r1, r2
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3
 8006946:	4603      	mov	r3, r0
 8006948:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800694a:	7dbb      	ldrb	r3, [r7, #22]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006950:	7dbb      	ldrb	r3, [r7, #22]
 8006952:	e000      	b.n	8006956 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6852      	ldr	r2, [r2, #4]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	4611      	mov	r1, r2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c4:	2340      	movs	r3, #64	@ 0x40
 80069c6:	2200      	movs	r2, #0
 80069c8:	2100      	movs	r1, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fbdd 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2240      	movs	r2, #64	@ 0x40
 80069dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069e0:	2340      	movs	r3, #64	@ 0x40
 80069e2:	2200      	movs	r2, #0
 80069e4:	2180      	movs	r1, #128	@ 0x80
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fbcf 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2240      	movs	r2, #64	@ 0x40
 80069f6:	621a      	str	r2, [r3, #32]

  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d006      	beq.n	8006a44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2204      	movs	r2, #4
 8006a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d106      	bne.n	8006a7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d110      	bne.n	8006ac0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	32ae      	adds	r2, #174	@ 0xae
 8006ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e01c      	b.n	8006b26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d115      	bne.n	8006b24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32ae      	adds	r2, #174	@ 0xae
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	32ae      	adds	r2, #174	@ 0xae
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	32ae      	adds	r2, #174	@ 0xae
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e01c      	b.n	8006b8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d115      	bne.n	8006b88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32ae      	adds	r2, #174	@ 0xae
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32ae      	adds	r2, #174	@ 0xae
 8006b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	4611      	mov	r1, r2
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6852      	ldr	r2, [r2, #4]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006bfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d91f      	bls.n	8006c88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c4e:	e013      	b.n	8006c78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c50:	f107 030a 	add.w	r3, r7, #10
 8006c54:	4619      	mov	r1, r3
 8006c56:	6978      	ldr	r0, [r7, #20]
 8006c58:	f000 f81b 	bl	8006c92 <USBD_GetNextDesc>
 8006c5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	d108      	bne.n	8006c78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	789b      	ldrb	r3, [r3, #2]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d008      	beq.n	8006c86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	885b      	ldrh	r3, [r3, #2]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d8e5      	bhi.n	8006c50 <USBD_GetEpDesc+0x2e>
 8006c84:	e000      	b.n	8006c88 <USBD_GetEpDesc+0x66>
          break;
 8006c86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c88:	693b      	ldr	r3, [r7, #16]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ce8:	8a3b      	ldrh	r3, [r7, #16]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	b21a      	sxth	r2, r3
 8006cee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d005      	beq.n	8006d2e <USBD_StdDevReq+0x26>
 8006d22:	2b40      	cmp	r3, #64	@ 0x40
 8006d24:	d857      	bhi.n	8006dd6 <USBD_StdDevReq+0xce>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <USBD_StdDevReq+0x42>
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d153      	bne.n	8006dd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	32ae      	adds	r2, #174	@ 0xae
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e04a      	b.n	8006de0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b09      	cmp	r3, #9
 8006d50:	d83b      	bhi.n	8006dca <USBD_StdDevReq+0xc2>
 8006d52:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <USBD_StdDevReq+0x50>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006dad 	.word	0x08006dad
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dcb 	.word	0x08006dcb
 8006d64:	08006db7 	.word	0x08006db7
 8006d68:	08006dcb 	.word	0x08006dcb
 8006d6c:	08006d8b 	.word	0x08006d8b
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006dcb 	.word	0x08006dcb
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006d95 	.word	0x08006d95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa3c 	bl	8007200 <USBD_GetDescriptor>
          break;
 8006d88:	e024      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fba1 	bl	80074d4 <USBD_SetAddress>
          break;
 8006d92:	e01f      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbe0 	bl	800755c <USBD_SetConfig>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006da0:	e018      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc83 	bl	80076b0 <USBD_GetConfig>
          break;
 8006daa:	e013      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fcb4 	bl	800771c <USBD_GetStatus>
          break;
 8006db4:	e00e      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fce3 	bl	8007784 <USBD_SetFeature>
          break;
 8006dbe:	e009      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd07 	bl	80077d6 <USBD_ClrFeature>
          break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fd5e 	bl	800788e <USBD_CtlError>
          break;
 8006dd2:	bf00      	nop
      }
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd58 	bl	800788e <USBD_CtlError>
      break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	d005      	beq.n	8006e12 <USBD_StdItfReq+0x26>
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	d852      	bhi.n	8006eb0 <USBD_StdItfReq+0xc4>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <USBD_StdItfReq+0x26>
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d14e      	bne.n	8006eb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d840      	bhi.n	8006ea2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	889b      	ldrh	r3, [r3, #4]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d836      	bhi.n	8006e98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	889b      	ldrh	r3, [r3, #4]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fedb 	bl	8006bee <USBD_CoreFindIF>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2bff      	cmp	r3, #255	@ 0xff
 8006e40:	d01d      	beq.n	8006e7e <USBD_StdItfReq+0x92>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d11a      	bne.n	8006e7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e48:	7bba      	ldrb	r2, [r7, #14]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	32ae      	adds	r2, #174	@ 0xae
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e58:	7bba      	ldrb	r2, [r7, #14]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e60:	7bba      	ldrb	r2, [r7, #14]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32ae      	adds	r2, #174	@ 0xae
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e76:	e004      	b.n	8006e82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e7c:	e001      	b.n	8006e82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d110      	bne.n	8006eac <USBD_StdItfReq+0xc0>
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10d      	bne.n	8006eac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fdc7 	bl	8007a24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e96:	e009      	b.n	8006eac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fcf7 	bl	800788e <USBD_CtlError>
          break;
 8006ea0:	e004      	b.n	8006eac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fcf2 	bl	800788e <USBD_CtlError>
          break;
 8006eaa:	e000      	b.n	8006eae <USBD_StdItfReq+0xc2>
          break;
 8006eac:	bf00      	nop
      }
      break;
 8006eae:	e004      	b.n	8006eba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fceb 	bl	800788e <USBD_CtlError>
      break;
 8006eb8:	bf00      	nop
  }

  return ret;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	889b      	ldrh	r3, [r3, #4]
 8006ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d007      	beq.n	8006ef4 <USBD_StdEPReq+0x30>
 8006ee4:	2b40      	cmp	r3, #64	@ 0x40
 8006ee6:	f200 817f 	bhi.w	80071e8 <USBD_StdEPReq+0x324>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d02a      	beq.n	8006f44 <USBD_StdEPReq+0x80>
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	f040 817a 	bne.w	80071e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fe85 	bl	8006c08 <USBD_CoreFindEP>
 8006efe:	4603      	mov	r3, r0
 8006f00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f02:	7b7b      	ldrb	r3, [r7, #13]
 8006f04:	2bff      	cmp	r3, #255	@ 0xff
 8006f06:	f000 8174 	beq.w	80071f2 <USBD_StdEPReq+0x32e>
 8006f0a:	7b7b      	ldrb	r3, [r7, #13]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 8170 	bne.w	80071f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006f12:	7b7a      	ldrb	r2, [r7, #13]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f1a:	7b7a      	ldrb	r2, [r7, #13]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	32ae      	adds	r2, #174	@ 0xae
 8006f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8163 	beq.w	80071f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f2c:	7b7a      	ldrb	r2, [r7, #13]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32ae      	adds	r2, #174	@ 0xae
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f42:	e156      	b.n	80071f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d008      	beq.n	8006f5e <USBD_StdEPReq+0x9a>
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	f300 8145 	bgt.w	80071dc <USBD_StdEPReq+0x318>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 809b 	beq.w	800708e <USBD_StdEPReq+0x1ca>
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d03c      	beq.n	8006fd6 <USBD_StdEPReq+0x112>
 8006f5c:	e13e      	b.n	80071dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d002      	beq.n	8006f70 <USBD_StdEPReq+0xac>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d016      	beq.n	8006f9c <USBD_StdEPReq+0xd8>
 8006f6e:	e02c      	b.n	8006fca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <USBD_StdEPReq+0xce>
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b80      	cmp	r3, #128	@ 0x80
 8006f7a:	d00a      	beq.n	8006f92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f947 	bl	8008214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f86:	2180      	movs	r1, #128	@ 0x80
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 f943 	bl	8008214 <USBD_LL_StallEP>
 8006f8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f90:	e020      	b.n	8006fd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fc7a 	bl	800788e <USBD_CtlError>
              break;
 8006f9a:	e01b      	b.n	8006fd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10e      	bne.n	8006fc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <USBD_StdEPReq+0xfe>
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b80      	cmp	r3, #128	@ 0x80
 8006fae:	d008      	beq.n	8006fc2 <USBD_StdEPReq+0xfe>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	88db      	ldrh	r3, [r3, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f929 	bl	8008214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fd2e 	bl	8007a24 <USBD_CtlSendStatus>

              break;
 8006fc8:	e004      	b.n	8006fd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fc5e 	bl	800788e <USBD_CtlError>
              break;
 8006fd2:	bf00      	nop
          }
          break;
 8006fd4:	e107      	b.n	80071e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d002      	beq.n	8006fe8 <USBD_StdEPReq+0x124>
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d016      	beq.n	8007014 <USBD_StdEPReq+0x150>
 8006fe6:	e04b      	b.n	8007080 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <USBD_StdEPReq+0x146>
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b80      	cmp	r3, #128	@ 0x80
 8006ff2:	d00a      	beq.n	800700a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f90b 	bl	8008214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ffe:	2180      	movs	r1, #128	@ 0x80
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f907 	bl	8008214 <USBD_LL_StallEP>
 8007006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007008:	e040      	b.n	800708c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc3e 	bl	800788e <USBD_CtlError>
              break;
 8007012:	e03b      	b.n	800708c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	885b      	ldrh	r3, [r3, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d136      	bne.n	800708a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 f911 	bl	8008252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fcf7 	bl	8007a24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fde4 	bl	8006c08 <USBD_CoreFindEP>
 8007040:	4603      	mov	r3, r0
 8007042:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007044:	7b7b      	ldrb	r3, [r7, #13]
 8007046:	2bff      	cmp	r3, #255	@ 0xff
 8007048:	d01f      	beq.n	800708a <USBD_StdEPReq+0x1c6>
 800704a:	7b7b      	ldrb	r3, [r7, #13]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11c      	bne.n	800708a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007050:	7b7a      	ldrb	r2, [r7, #13]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007058:	7b7a      	ldrb	r2, [r7, #13]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32ae      	adds	r2, #174	@ 0xae
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007068:	7b7a      	ldrb	r2, [r7, #13]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32ae      	adds	r2, #174	@ 0xae
 800706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800707e:	e004      	b.n	800708a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc03 	bl	800788e <USBD_CtlError>
              break;
 8007088:	e000      	b.n	800708c <USBD_StdEPReq+0x1c8>
              break;
 800708a:	bf00      	nop
          }
          break;
 800708c:	e0ab      	b.n	80071e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d002      	beq.n	80070a0 <USBD_StdEPReq+0x1dc>
 800709a:	2b03      	cmp	r3, #3
 800709c:	d032      	beq.n	8007104 <USBD_StdEPReq+0x240>
 800709e:	e097      	b.n	80071d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <USBD_StdEPReq+0x1f2>
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b80      	cmp	r3, #128	@ 0x80
 80070aa:	d004      	beq.n	80070b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fbed 	bl	800788e <USBD_CtlError>
                break;
 80070b4:	e091      	b.n	80071da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da0b      	bge.n	80070d6 <USBD_StdEPReq+0x212>
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	3310      	adds	r3, #16
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	3304      	adds	r3, #4
 80070d4:	e00b      	b.n	80070ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	3304      	adds	r3, #4
 80070ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2202      	movs	r2, #2
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc37 	bl	8007970 <USBD_CtlSendData>
              break;
 8007102:	e06a      	b.n	80071da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	da11      	bge.n	8007130 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	f003 020f 	and.w	r2, r3, #15
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	3324      	adds	r3, #36	@ 0x24
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d117      	bne.n	8007156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fbb0 	bl	800788e <USBD_CtlError>
                  break;
 800712e:	e054      	b.n	80071da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fb9d 	bl	800788e <USBD_CtlError>
                  break;
 8007154:	e041      	b.n	80071da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	da0b      	bge.n	8007176 <USBD_StdEPReq+0x2b2>
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	3310      	adds	r3, #16
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	4413      	add	r3, r2
 8007172:	3304      	adds	r3, #4
 8007174:	e00b      	b.n	800718e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <USBD_StdEPReq+0x2d8>
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b80      	cmp	r3, #128	@ 0x80
 800719a:	d103      	bne.n	80071a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e00e      	b.n	80071c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f871 	bl	8008290 <USBD_LL_IsStallEP>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2202      	movs	r2, #2
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fbd1 	bl	8007970 <USBD_CtlSendData>
              break;
 80071ce:	e004      	b.n	80071da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fb5b 	bl	800788e <USBD_CtlError>
              break;
 80071d8:	bf00      	nop
          }
          break;
 80071da:	e004      	b.n	80071e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fb55 	bl	800788e <USBD_CtlError>
          break;
 80071e4:	bf00      	nop
      }
      break;
 80071e6:	e005      	b.n	80071f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb4f 	bl	800788e <USBD_CtlError>
      break;
 80071f0:	e000      	b.n	80071f4 <USBD_StdEPReq+0x330>
      break;
 80071f2:	bf00      	nop
  }

  return ret;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b06      	cmp	r3, #6
 8007222:	f200 8128 	bhi.w	8007476 <USBD_GetDescriptor+0x276>
 8007226:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <USBD_GetDescriptor+0x2c>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007249 	.word	0x08007249
 8007230:	08007261 	.word	0x08007261
 8007234:	080072a1 	.word	0x080072a1
 8007238:	08007477 	.word	0x08007477
 800723c:	08007477 	.word	0x08007477
 8007240:	08007417 	.word	0x08007417
 8007244:	08007443 	.word	0x08007443
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7c12      	ldrb	r2, [r2, #16]
 8007254:	f107 0108 	add.w	r1, r7, #8
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	60f8      	str	r0, [r7, #12]
      break;
 800725e:	e112      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7c1b      	ldrb	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10d      	bne.n	8007284 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	f107 0208 	add.w	r2, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	2202      	movs	r2, #2
 8007280:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007282:	e100      	b.n	8007486 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	f107 0208 	add.w	r2, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	2202      	movs	r2, #2
 800729c:	701a      	strb	r2, [r3, #0]
      break;
 800729e:	e0f2      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	885b      	ldrh	r3, [r3, #2]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	f200 80ac 	bhi.w	8007404 <USBD_GetDescriptor+0x204>
 80072ac:	a201      	add	r2, pc, #4	@ (adr r2, 80072b4 <USBD_GetDescriptor+0xb4>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007335 	.word	0x08007335
 80072c0:	08007369 	.word	0x08007369
 80072c4:	0800739d 	.word	0x0800739d
 80072c8:	080073d1 	.word	0x080073d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ee:	e091      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 facb 	bl	800788e <USBD_CtlError>
            err++;
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	3301      	adds	r3, #1
 80072fc:	72fb      	strb	r3, [r7, #11]
          break;
 80072fe:	e089      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007322:	e077      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fab1 	bl	800788e <USBD_CtlError>
            err++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
          break;
 8007332:	e06f      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007356:	e05d      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa97 	bl	800788e <USBD_CtlError>
            err++;
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	3301      	adds	r3, #1
 8007364:	72fb      	strb	r3, [r7, #11]
          break;
 8007366:	e055      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	7c12      	ldrb	r2, [r2, #16]
 8007380:	f107 0108 	add.w	r1, r7, #8
 8007384:	4610      	mov	r0, r2
 8007386:	4798      	blx	r3
 8007388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800738a:	e043      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa7d 	bl	800788e <USBD_CtlError>
            err++;
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	3301      	adds	r3, #1
 8007398:	72fb      	strb	r3, [r7, #11]
          break;
 800739a:	e03b      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	7c12      	ldrb	r2, [r2, #16]
 80073b4:	f107 0108 	add.w	r1, r7, #8
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
 80073bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073be:	e029      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa63 	bl	800788e <USBD_CtlError>
            err++;
 80073c8:	7afb      	ldrb	r3, [r7, #11]
 80073ca:	3301      	adds	r3, #1
 80073cc:	72fb      	strb	r3, [r7, #11]
          break;
 80073ce:	e021      	b.n	8007414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
 80073f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073f2:	e00f      	b.n	8007414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa49 	bl	800788e <USBD_CtlError>
            err++;
 80073fc:	7afb      	ldrb	r3, [r7, #11]
 80073fe:	3301      	adds	r3, #1
 8007400:	72fb      	strb	r3, [r7, #11]
          break;
 8007402:	e007      	b.n	8007414 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa41 	bl	800788e <USBD_CtlError>
          err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007412:	bf00      	nop
      }
      break;
 8007414:	e037      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7c1b      	ldrb	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007426:	f107 0208 	add.w	r2, r7, #8
 800742a:	4610      	mov	r0, r2
 800742c:	4798      	blx	r3
 800742e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007430:	e029      	b.n	8007486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa2a 	bl	800788e <USBD_CtlError>
        err++;
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	3301      	adds	r3, #1
 800743e:	72fb      	strb	r3, [r7, #11]
      break;
 8007440:	e021      	b.n	8007486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7c1b      	ldrb	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007452:	f107 0208 	add.w	r2, r7, #8
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
 800745a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	2207      	movs	r2, #7
 8007462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007464:	e00f      	b.n	8007486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa10 	bl	800788e <USBD_CtlError>
        err++;
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	3301      	adds	r3, #1
 8007472:	72fb      	strb	r3, [r7, #11]
      break;
 8007474:	e007      	b.n	8007486 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa08 	bl	800788e <USBD_CtlError>
      err++;
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	3301      	adds	r3, #1
 8007482:	72fb      	strb	r3, [r7, #11]
      break;
 8007484:	bf00      	nop
  }

  if (err != 0U)
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11e      	bne.n	80074ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	88db      	ldrh	r3, [r3, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00e      	beq.n	80074b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88da      	ldrh	r2, [r3, #6]
 800749e:	893b      	ldrh	r3, [r7, #8]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bf28      	it	cs
 80074a4:	4613      	movcs	r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	461a      	mov	r2, r3
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa5d 	bl	8007970 <USBD_CtlSendData>
 80074b6:	e009      	b.n	80074cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9e7 	bl	800788e <USBD_CtlError>
 80074c0:	e004      	b.n	80074cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 faae 	bl	8007a24 <USBD_CtlSendStatus>
 80074c8:	e000      	b.n	80074cc <USBD_GetDescriptor+0x2cc>
    return;
 80074ca:	bf00      	nop
  }
}
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	889b      	ldrh	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d131      	bne.n	800754a <USBD_SetAddress+0x76>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	88db      	ldrh	r3, [r3, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d12d      	bne.n	800754a <USBD_SetAddress+0x76>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	885b      	ldrh	r3, [r3, #2]
 80074f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80074f4:	d829      	bhi.n	800754a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b03      	cmp	r3, #3
 800750c:	d104      	bne.n	8007518 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f9bc 	bl	800788e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007516:	e01d      	b.n	8007554 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7bfa      	ldrb	r2, [r7, #15]
 800751c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fedf 	bl	80082e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa7a 	bl	8007a24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	e009      	b.n	8007554 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007548:	e004      	b.n	8007554 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f99e 	bl	800788e <USBD_CtlError>
  }
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	885b      	ldrh	r3, [r3, #2]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	4b4e      	ldr	r3, [pc, #312]	@ (80076ac <USBD_SetConfig+0x150>)
 8007572:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007574:	4b4d      	ldr	r3, [pc, #308]	@ (80076ac <USBD_SetConfig+0x150>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d905      	bls.n	8007588 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f985 	bl	800788e <USBD_CtlError>
    return USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e08c      	b.n	80076a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d002      	beq.n	800759a <USBD_SetConfig+0x3e>
 8007594:	2b03      	cmp	r3, #3
 8007596:	d029      	beq.n	80075ec <USBD_SetConfig+0x90>
 8007598:	e075      	b.n	8007686 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800759a:	4b44      	ldr	r3, [pc, #272]	@ (80076ac <USBD_SetConfig+0x150>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d020      	beq.n	80075e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80075a2:	4b42      	ldr	r3, [pc, #264]	@ (80076ac <USBD_SetConfig+0x150>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ac:	4b3f      	ldr	r3, [pc, #252]	@ (80076ac <USBD_SetConfig+0x150>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fe ffe3 	bl	800657e <USBD_SetClassConfig>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f962 	bl	800788e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075d2:	e065      	b.n	80076a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fa25 	bl	8007a24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2203      	movs	r2, #3
 80075de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80075e2:	e05d      	b.n	80076a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fa1d 	bl	8007a24 <USBD_CtlSendStatus>
      break;
 80075ea:	e059      	b.n	80076a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <USBD_SetConfig+0x150>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d112      	bne.n	800761a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <USBD_SetConfig+0x150>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007606:	4b29      	ldr	r3, [pc, #164]	@ (80076ac <USBD_SetConfig+0x150>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fe ffd2 	bl	80065b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa06 	bl	8007a24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007618:	e042      	b.n	80076a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800761a:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <USBD_SetConfig+0x150>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d02a      	beq.n	800767e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fe ffc0 	bl	80065b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007636:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <USBD_SetConfig+0x150>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007640:	4b1a      	ldr	r3, [pc, #104]	@ (80076ac <USBD_SetConfig+0x150>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fe ff99 	bl	800657e <USBD_SetClassConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f918 	bl	800788e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fe ffa5 	bl	80065b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007674:	e014      	b.n	80076a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9d4 	bl	8007a24 <USBD_CtlSendStatus>
      break;
 800767c:	e010      	b.n	80076a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f9d0 	bl	8007a24 <USBD_CtlSendStatus>
      break;
 8007684:	e00c      	b.n	80076a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f900 	bl	800788e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800768e:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <USBD_SetConfig+0x150>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fe ff8e 	bl	80065b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800769a:	2303      	movs	r3, #3
 800769c:	73fb      	strb	r3, [r7, #15]
      break;
 800769e:	bf00      	nop
  }

  return ret;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	200002a4 	.word	0x200002a4

080076b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	88db      	ldrh	r3, [r3, #6]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d004      	beq.n	80076cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f8e2 	bl	800788e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076ca:	e023      	b.n	8007714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	dc02      	bgt.n	80076de <USBD_GetConfig+0x2e>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	dc03      	bgt.n	80076e4 <USBD_GetConfig+0x34>
 80076dc:	e015      	b.n	800770a <USBD_GetConfig+0x5a>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d00b      	beq.n	80076fa <USBD_GetConfig+0x4a>
 80076e2:	e012      	b.n	800770a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3308      	adds	r3, #8
 80076ee:	2201      	movs	r2, #1
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f93c 	bl	8007970 <USBD_CtlSendData>
        break;
 80076f8:	e00c      	b.n	8007714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3304      	adds	r3, #4
 80076fe:	2201      	movs	r2, #1
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f934 	bl	8007970 <USBD_CtlSendData>
        break;
 8007708:	e004      	b.n	8007714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8be 	bl	800788e <USBD_CtlError>
        break;
 8007712:	bf00      	nop
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	2b02      	cmp	r3, #2
 8007732:	d81e      	bhi.n	8007772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	88db      	ldrh	r3, [r3, #6]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d004      	beq.n	8007746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8a5 	bl	800788e <USBD_CtlError>
        break;
 8007744:	e01a      	b.n	800777c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f043 0202 	orr.w	r2, r3, #2
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	330c      	adds	r3, #12
 8007766:	2202      	movs	r2, #2
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f900 	bl	8007970 <USBD_CtlSendData>
      break;
 8007770:	e004      	b.n	800777c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f88a 	bl	800788e <USBD_CtlError>
      break;
 800777a:	bf00      	nop
  }
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f940 	bl	8007a24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80077a4:	e013      	b.n	80077ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	885b      	ldrh	r3, [r3, #2]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d10b      	bne.n	80077c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	889b      	ldrh	r3, [r3, #4]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f930 	bl	8007a24 <USBD_CtlSendStatus>
}
 80077c4:	e003      	b.n	80077ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f860 	bl	800788e <USBD_CtlError>
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d80b      	bhi.n	8007806 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	885b      	ldrh	r3, [r3, #2]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d10c      	bne.n	8007810 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f910 	bl	8007a24 <USBD_CtlSendStatus>
      }
      break;
 8007804:	e004      	b.n	8007810 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f840 	bl	800788e <USBD_CtlError>
      break;
 800780e:	e000      	b.n	8007812 <USBD_ClrFeature+0x3c>
      break;
 8007810:	bf00      	nop
  }
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff fa40 	bl	8006cca <SWAPBYTE>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fa33 	bl	8006cca <SWAPBYTE>
 8007864:	4603      	mov	r3, r0
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fa26 	bl	8006cca <SWAPBYTE>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	80da      	strh	r2, [r3, #6]
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007898:	2180      	movs	r1, #128	@ 0x80
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fcba 	bl	8008214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078a0:	2100      	movs	r1, #0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fcb6 	bl	8008214 <USBD_LL_StallEP>
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d036      	beq.n	8007934 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078ca:	6938      	ldr	r0, [r7, #16]
 80078cc:	f000 f836 	bl	800793c <USBD_GetLen>
 80078d0:	4603      	mov	r3, r0
 80078d2:	3301      	adds	r3, #1
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4413      	add	r3, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	3301      	adds	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	2203      	movs	r2, #3
 80078f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	3301      	adds	r3, #1
 80078fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007900:	e013      	b.n	800792a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4413      	add	r3, r2
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	613b      	str	r3, [r7, #16]
    idx++;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	3301      	adds	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4413      	add	r3, r2
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
    idx++;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	3301      	adds	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e7      	bne.n	8007902 <USBD_GetString+0x52>
 8007932:	e000      	b.n	8007936 <USBD_GetString+0x86>
    return;
 8007934:	bf00      	nop
  }
}
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800794c:	e005      	b.n	800795a <USBD_GetLen+0x1e>
  {
    len++;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	3301      	adds	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3301      	adds	r3, #1
 8007958:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f5      	bne.n	800794e <USBD_GetLen+0x12>
  }

  return len;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2202      	movs	r2, #2
 8007980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	2100      	movs	r1, #0
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 fcc5 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	2100      	movs	r1, #0
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 fcb4 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	2100      	movs	r1, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fcb8 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fca7 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a34:	2300      	movs	r3, #0
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc73 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2205      	movs	r2, #5
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc81 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4912      	ldr	r1, [pc, #72]	@ (8007ac0 <MX_USB_DEVICE_Init+0x50>)
 8007a78:	4812      	ldr	r0, [pc, #72]	@ (8007ac4 <MX_USB_DEVICE_Init+0x54>)
 8007a7a:	f7fe fd03 	bl	8006484 <USBD_Init>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a84:	f7f9 f8a6 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a88:	490f      	ldr	r1, [pc, #60]	@ (8007ac8 <MX_USB_DEVICE_Init+0x58>)
 8007a8a:	480e      	ldr	r0, [pc, #56]	@ (8007ac4 <MX_USB_DEVICE_Init+0x54>)
 8007a8c:	f7fe fd2a 	bl	80064e4 <USBD_RegisterClass>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a96:	f7f9 f89d 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a9a:	490c      	ldr	r1, [pc, #48]	@ (8007acc <MX_USB_DEVICE_Init+0x5c>)
 8007a9c:	4809      	ldr	r0, [pc, #36]	@ (8007ac4 <MX_USB_DEVICE_Init+0x54>)
 8007a9e:	f7fe fc61 	bl	8006364 <USBD_CDC_RegisterInterface>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007aa8:	f7f9 f894 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007aac:	4805      	ldr	r0, [pc, #20]	@ (8007ac4 <MX_USB_DEVICE_Init+0x54>)
 8007aae:	f7fe fd4f 	bl	8006550 <USBD_Start>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ab8:	f7f9 f88c 	bl	8000bd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007abc:	bf00      	nop
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	200000ac 	.word	0x200000ac
 8007ac4:	200002a8 	.word	0x200002a8
 8007ac8:	20000018 	.word	0x20000018
 8007acc:	20000098 	.word	0x20000098

08007ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4905      	ldr	r1, [pc, #20]	@ (8007aec <CDC_Init_FS+0x1c>)
 8007ad8:	4805      	ldr	r0, [pc, #20]	@ (8007af0 <CDC_Init_FS+0x20>)
 8007ada:	f7fe fc5d 	bl	8006398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ade:	4905      	ldr	r1, [pc, #20]	@ (8007af4 <CDC_Init_FS+0x24>)
 8007ae0:	4803      	ldr	r0, [pc, #12]	@ (8007af0 <CDC_Init_FS+0x20>)
 8007ae2:	f7fe fc7b 	bl	80063dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000d84 	.word	0x20000d84
 8007af0:	200002a8 	.word	0x200002a8
 8007af4:	20000584 	.word	0x20000584

08007af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	2b23      	cmp	r3, #35	@ 0x23
 8007b1c:	d84a      	bhi.n	8007bb4 <CDC_Control_FS+0xac>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <CDC_Control_FS+0x1c>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007bb5 	.word	0x08007bb5
 8007b28:	08007bb5 	.word	0x08007bb5
 8007b2c:	08007bb5 	.word	0x08007bb5
 8007b30:	08007bb5 	.word	0x08007bb5
 8007b34:	08007bb5 	.word	0x08007bb5
 8007b38:	08007bb5 	.word	0x08007bb5
 8007b3c:	08007bb5 	.word	0x08007bb5
 8007b40:	08007bb5 	.word	0x08007bb5
 8007b44:	08007bb5 	.word	0x08007bb5
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007bb5 	.word	0x08007bb5
 8007b50:	08007bb5 	.word	0x08007bb5
 8007b54:	08007bb5 	.word	0x08007bb5
 8007b58:	08007bb5 	.word	0x08007bb5
 8007b5c:	08007bb5 	.word	0x08007bb5
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007bb5 	.word	0x08007bb5
 8007b68:	08007bb5 	.word	0x08007bb5
 8007b6c:	08007bb5 	.word	0x08007bb5
 8007b70:	08007bb5 	.word	0x08007bb5
 8007b74:	08007bb5 	.word	0x08007bb5
 8007b78:	08007bb5 	.word	0x08007bb5
 8007b7c:	08007bb5 	.word	0x08007bb5
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007bb5 	.word	0x08007bb5
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bb5 	.word	0x08007bb5
 8007b90:	08007bb5 	.word	0x08007bb5
 8007b94:	08007bb5 	.word	0x08007bb5
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007bb5 	.word	0x08007bb5
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bb5 	.word	0x08007bb5
 8007bac:	08007bb5 	.word	0x08007bb5
 8007bb0:	08007bb5 	.word	0x08007bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bb4:	bf00      	nop
  }

  return (USBD_OK);
 8007bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <CDC_Receive_FS+0x24>)
 8007bd2:	f7fe fc03 	bl	80063dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bd6:	4804      	ldr	r0, [pc, #16]	@ (8007be8 <CDC_Receive_FS+0x24>)
 8007bd8:	f7fe fc1e 	bl	8006418 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007bdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200002a8 	.word	0x200002a8

08007bec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2212      	movs	r2, #18
 8007c20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	@ (8007c30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	200000c8 	.word	0x200000c8

08007c34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2204      	movs	r2, #4
 8007c44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	@ (8007c54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	200000dc 	.word	0x200000dc

08007c58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	6039      	str	r1, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	4907      	ldr	r1, [pc, #28]	@ (8007c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c6e:	4808      	ldr	r0, [pc, #32]	@ (8007c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c70:	f7ff fe1e 	bl	80078b0 <USBD_GetString>
 8007c74:	e004      	b.n	8007c80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	4904      	ldr	r1, [pc, #16]	@ (8007c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c7a:	4805      	ldr	r0, [pc, #20]	@ (8007c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c7c:	f7ff fe18 	bl	80078b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c80:	4b02      	ldr	r3, [pc, #8]	@ (8007c8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20001584 	.word	0x20001584
 8007c90:	080084c8 	.word	0x080084c8

08007c94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ca4:	4804      	ldr	r0, [pc, #16]	@ (8007cb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ca6:	f7ff fe03 	bl	80078b0 <USBD_GetString>
  return USBD_StrDesc;
 8007caa:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20001584 	.word	0x20001584
 8007cb8:	080084dc 	.word	0x080084dc

08007cbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	221a      	movs	r2, #26
 8007ccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cce:	f000 f843 	bl	8007d58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cd2:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	200000e0 	.word	0x200000e0

08007ce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	6039      	str	r1, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	4907      	ldr	r1, [pc, #28]	@ (8007d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cf6:	4808      	ldr	r0, [pc, #32]	@ (8007d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cf8:	f7ff fdda 	bl	80078b0 <USBD_GetString>
 8007cfc:	e004      	b.n	8007d08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4904      	ldr	r1, [pc, #16]	@ (8007d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d02:	4805      	ldr	r0, [pc, #20]	@ (8007d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d04:	f7ff fdd4 	bl	80078b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d08:	4b02      	ldr	r3, [pc, #8]	@ (8007d14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20001584 	.word	0x20001584
 8007d18:	080084f0 	.word	0x080084f0

08007d1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	4907      	ldr	r1, [pc, #28]	@ (8007d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d32:	4808      	ldr	r0, [pc, #32]	@ (8007d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d34:	f7ff fdbc 	bl	80078b0 <USBD_GetString>
 8007d38:	e004      	b.n	8007d44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	4904      	ldr	r1, [pc, #16]	@ (8007d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d3e:	4805      	ldr	r0, [pc, #20]	@ (8007d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d40:	f7ff fdb6 	bl	80078b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d44:	4b02      	ldr	r3, [pc, #8]	@ (8007d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20001584 	.word	0x20001584
 8007d54:	080084fc 	.word	0x080084fc

08007d58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <Get_SerialNum+0x44>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d64:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <Get_SerialNum+0x48>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <Get_SerialNum+0x4c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4413      	add	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d7e:	2208      	movs	r2, #8
 8007d80:	4909      	ldr	r1, [pc, #36]	@ (8007da8 <Get_SerialNum+0x50>)
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f814 	bl	8007db0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d88:	2204      	movs	r2, #4
 8007d8a:	4908      	ldr	r1, [pc, #32]	@ (8007dac <Get_SerialNum+0x54>)
 8007d8c:	68b8      	ldr	r0, [r7, #8]
 8007d8e:	f000 f80f 	bl	8007db0 <IntToUnicode>
  }
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	1fff7a10 	.word	0x1fff7a10
 8007da0:	1fff7a14 	.word	0x1fff7a14
 8007da4:	1fff7a18 	.word	0x1fff7a18
 8007da8:	200000e2 	.word	0x200000e2
 8007dac:	200000f2 	.word	0x200000f2

08007db0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
 8007dc6:	e027      	b.n	8007e18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	0f1b      	lsrs	r3, r3, #28
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d80b      	bhi.n	8007de8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	0f1b      	lsrs	r3, r3, #28
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	440b      	add	r3, r1
 8007de0:	3230      	adds	r2, #48	@ 0x30
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e00a      	b.n	8007dfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	0f1b      	lsrs	r3, r3, #28
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	4619      	mov	r1, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	440b      	add	r3, r1
 8007df8:	3237      	adds	r2, #55	@ 0x37
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	3301      	adds	r3, #1
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	3301      	adds	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
 8007e18:	7dfa      	ldrb	r2, [r7, #23]
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3d3      	bcc.n	8007dc8 <IntToUnicode+0x18>
  }
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	@ 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	605a      	str	r2, [r3, #4]
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e50:	d13a      	bne.n	8007ec8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8007e6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e74:	2302      	movs	r3, #2
 8007e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e80:	230a      	movs	r3, #10
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4812      	ldr	r0, [pc, #72]	@ (8007ed4 <HAL_PCD_MspInit+0xa4>)
 8007e8c:	f7f9 fa6c 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e90:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e94:	4a0e      	ldr	r2, [pc, #56]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9a:	6353      	str	r3, [r2, #52]	@ 0x34
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007eaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8007eac:	4b08      	ldr	r3, [pc, #32]	@ (8007ed0 <HAL_PCD_MspInit+0xa0>)
 8007eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	2043      	movs	r0, #67	@ 0x43
 8007ebe:	f7f9 fa1c 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ec2:	2043      	movs	r0, #67	@ 0x43
 8007ec4:	f7f9 fa35 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3728      	adds	r7, #40	@ 0x28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	40020000 	.word	0x40020000

08007ed8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f7fe fb7b 	bl	80065ea <USBD_LL_SetupStage>
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f7fe fbb5 	bl	8006694 <USBD_LL_DataOutStage>
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007f44:	78fa      	ldrb	r2, [r7, #3]
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3320      	adds	r3, #32
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f7fe fc4e 	bl	80067fa <USBD_LL_DataInStage>
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fd88 	bl	8006a8a <USBD_LL_SOF>
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	79db      	ldrb	r3, [r3, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
 8007f9a:	e008      	b.n	8007fae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	79db      	ldrb	r3, [r3, #7]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d102      	bne.n	8007faa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e001      	b.n	8007fae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007faa:	f7f8 fe13 	bl	8000bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fb4:	7bfa      	ldrb	r2, [r7, #15]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fd22 	bl	8006a02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe fcca 	bl	800695e <USBD_LL_Reset>
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fd1d 	bl	8006a22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7adb      	ldrb	r3, [r3, #11]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <HAL_PCD_SuspendCallback+0x48>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4a03      	ldr	r2, [pc, #12]	@ (800801c <HAL_PCD_SuspendCallback+0x48>)
 800800e:	f043 0306 	orr.w	r3, r3, #6
 8008012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed00 	.word	0xe000ed00

08008020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fd13 	bl	8006a5a <USBD_LL_Resume>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fd6b 	bl	8006b2e <USBD_LL_IsoOUTIncomplete>
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fd27 	bl	8006aca <USBD_LL_IsoINIncomplete>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd7d 	bl	8006b92 <USBD_LL_DevConnected>
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fd7a 	bl	8006ba8 <USBD_LL_DevDisconnected>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d13c      	bne.n	8008146 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080cc:	4a20      	ldr	r2, [pc, #128]	@ (8008150 <USBD_LL_Init+0x94>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008150 <USBD_LL_Init+0x94>)
 80080d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008150 <USBD_LL_Init+0x94>)
 80080de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80080e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <USBD_LL_Init+0x94>)
 80080e6:	2204      	movs	r2, #4
 80080e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080ea:	4b19      	ldr	r3, [pc, #100]	@ (8008150 <USBD_LL_Init+0x94>)
 80080ec:	2202      	movs	r2, #2
 80080ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080f0:	4b17      	ldr	r3, [pc, #92]	@ (8008150 <USBD_LL_Init+0x94>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080f6:	4b16      	ldr	r3, [pc, #88]	@ (8008150 <USBD_LL_Init+0x94>)
 80080f8:	2202      	movs	r2, #2
 80080fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080fc:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <USBD_LL_Init+0x94>)
 80080fe:	2200      	movs	r2, #0
 8008100:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008102:	4b13      	ldr	r3, [pc, #76]	@ (8008150 <USBD_LL_Init+0x94>)
 8008104:	2200      	movs	r2, #0
 8008106:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008108:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <USBD_LL_Init+0x94>)
 800810a:	2200      	movs	r2, #0
 800810c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800810e:	4b10      	ldr	r3, [pc, #64]	@ (8008150 <USBD_LL_Init+0x94>)
 8008110:	2200      	movs	r2, #0
 8008112:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008114:	4b0e      	ldr	r3, [pc, #56]	@ (8008150 <USBD_LL_Init+0x94>)
 8008116:	2200      	movs	r2, #0
 8008118:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800811a:	480d      	ldr	r0, [pc, #52]	@ (8008150 <USBD_LL_Init+0x94>)
 800811c:	f7f9 fac1 	bl	80016a2 <HAL_PCD_Init>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008126:	f7f8 fd55 	bl	8000bd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800812a:	2180      	movs	r1, #128	@ 0x80
 800812c:	4808      	ldr	r0, [pc, #32]	@ (8008150 <USBD_LL_Init+0x94>)
 800812e:	f7fa fcec 	bl	8002b0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008132:	2240      	movs	r2, #64	@ 0x40
 8008134:	2100      	movs	r1, #0
 8008136:	4806      	ldr	r0, [pc, #24]	@ (8008150 <USBD_LL_Init+0x94>)
 8008138:	f7fa fca0 	bl	8002a7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800813c:	2280      	movs	r2, #128	@ 0x80
 800813e:	2101      	movs	r1, #1
 8008140:	4803      	ldr	r0, [pc, #12]	@ (8008150 <USBD_LL_Init+0x94>)
 8008142:	f7fa fc9b 	bl	8002a7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20001784 	.word	0x20001784

08008154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 fba8 	bl	80018c0 <HAL_PCD_Start>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f942 	bl	8008400 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	4608      	mov	r0, r1
 8008194:	4611      	mov	r1, r2
 8008196:	461a      	mov	r2, r3
 8008198:	4603      	mov	r3, r0
 800819a:	70fb      	strb	r3, [r7, #3]
 800819c:	460b      	mov	r3, r1
 800819e:	70bb      	strb	r3, [r7, #2]
 80081a0:	4613      	mov	r3, r2
 80081a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081b2:	78bb      	ldrb	r3, [r7, #2]
 80081b4:	883a      	ldrh	r2, [r7, #0]
 80081b6:	78f9      	ldrb	r1, [r7, #3]
 80081b8:	f7fa f87c 	bl	80022b4 <HAL_PCD_EP_Open>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f91c 	bl	8008400 <USBD_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fa f8c5 	bl	8002384 <HAL_PCD_EP_Close>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f8fd 	bl	8008400 <USBD_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f7fa f97d 	bl	8002532 <HAL_PCD_EP_SetStall>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f8de 	bl	8008400 <USBD_Get_USB_Status>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008248:	7bbb      	ldrb	r3, [r7, #14]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7fa f9c1 	bl	80025f8 <HAL_PCD_EP_ClrStall>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f8bf 	bl	8008400 <USBD_Get_USB_Status>
 8008282:	4603      	mov	r3, r0
 8008284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008286:	7bbb      	ldrb	r3, [r7, #14]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da0b      	bge.n	80082c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3316      	adds	r3, #22
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	e00b      	b.n	80082dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80082da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 ffb0 	bl	800226c <HAL_PCD_SetAddress>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f874 	bl	8008400 <USBD_Get_USB_Status>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	460b      	mov	r3, r1
 8008334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008344:	7af9      	ldrb	r1, [r7, #11]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f7fa f8b8 	bl	80024be <HAL_PCD_EP_Transmit>
 800834e:	4603      	mov	r3, r0
 8008350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f853 	bl	8008400 <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800835e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	460b      	mov	r3, r1
 8008376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008386:	7af9      	ldrb	r1, [r7, #11]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	f7fa f844 	bl	8002418 <HAL_PCD_EP_Receive>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f832 	bl	8008400 <USBD_Get_USB_Status>
 800839c:	4603      	mov	r3, r0
 800839e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fa f864 	bl	800248e <HAL_PCD_EP_GetRxCount>
 80083c6:	4603      	mov	r3, r0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083d8:	4b03      	ldr	r3, [pc, #12]	@ (80083e8 <USBD_static_malloc+0x18>)
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20001c68 	.word	0x20001c68

080083ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d817      	bhi.n	8008444 <USBD_Get_USB_Status+0x44>
 8008414:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <USBD_Get_USB_Status+0x1c>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	0800842d 	.word	0x0800842d
 8008420:	08008433 	.word	0x08008433
 8008424:	08008439 	.word	0x08008439
 8008428:	0800843f 	.word	0x0800843f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
    break;
 8008430:	e00b      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	73fb      	strb	r3, [r7, #15]
    break;
 8008436:	e008      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e005      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e002      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	bf00      	nop
  }
  return usb_status;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <memset>:
 8008458:	4402      	add	r2, r0
 800845a:	4603      	mov	r3, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	d100      	bne.n	8008462 <memset+0xa>
 8008460:	4770      	bx	lr
 8008462:	f803 1b01 	strb.w	r1, [r3], #1
 8008466:	e7f9      	b.n	800845c <memset+0x4>

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	@ (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	@ (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	@ (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	@ (80084ac <__libc_init_array+0x44>)
 800847c:	f000 f818 	bl	80084b0 <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	08008524 	.word	0x08008524
 80084a4:	08008524 	.word	0x08008524
 80084a8:	08008524 	.word	0x08008524
 80084ac:	08008528 	.word	0x08008528

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
